
TABLES HANDLING SUBROUTINS
--------------------------

   In every data processing installation there are very small data sets
which are frequently used and application programs access them as
tables rather than access method files to improve performance and
simplify programs logic.  Very often such data are kept as members of
text libraries or card decks and manualy updated. Sometimes they are
even hard coded in the application programs. Common practice of using
such data tables is: - program using a table defines the file, in its
initialization logic reads the file and creates an in-storage table.
Main logic of the program accesses the in-storage table, usually
through a sequential search.
   Subroutines and a utility have been developed to facilitate
processing of tables. The following has been developed and are
available for use:

HALVE     - generalized binary search tables processing subroutine
HLVTD     - Assembler macro, generates TABLE DEFINITION control block
TBLACCSS  - tables access interface subroutine for COBOL programs
JJTBGEN   - utility, converts a file into a table in the load module
            format

The purpose of HALVE subroutine and accompaning JJTBGEN utility is to
improve performance of accessing the tables. Also the programming
effort can likely be reduced and programs maintain-ability improved.
Performance improvement comes from the fact that HALVE employs a very
efficient binary search to retrieve a table element.  JJTBGEN in turn
converts a file into a table in the load module format.  As the result
the programming effort of initialization of a table is reduced to a
simple LOAD of the table into storage. Farther gains can be realized by
setting up standard definitions of all existing tables in either macro
or copy-book libraries.
Tables created by JJTBGEN can essentialy be used in the single task
environment (only one task at a time can use the table). The reason
for that is that HALVE modifies TABLE DEFINITION control block (see
HALVE writeup). However, TABLE DEFINITION can be copied into a task
acquired storage and thus overcoming the limitation.
HALVE and TABLE DEFINITION have been designed to be used in either
ASSEMBLER or PL/1 programs (TABLE DEFINITION has address (pointer) type
constants). COBOL programs can access such tables through TBLACCSS
interface subroutine. Refer to individual routines writeups for farther
information.


Written by: Janek JAKUBEK, OGL
            March-April 1986
