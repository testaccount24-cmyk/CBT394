         TITLE 'HALVE - BINARY SEARCH TABLES PROCESSING ROUTINE'
* GENERALIZED BINARY SEARCH TECHNIQUE TABLES PROCESSING ROUTINE
*
* SPECIFICATIONS:
*
* MODULE NAME: HALVE
*
* FUNCTION = SEE BELOW
*
*       THE ROUTINE SEARCHES A TABLE FOR SPECIFIED KEY AND RETURNS
*    THE ADDRESS AND POSITION OF TABLE ELEMENT CONTAINING SUCH A KEY.
*    IT PERMITS ADDING OF NEW KEYS TO THE TABLE (TABLE EXPANTION)
*    SO THAT IT CAN BE USED FOR SORTING OR DYNAMIC CREATION OF SORTED
*    TABLES.
*    IF TABLE IS SPECIFIED LARGE ENOUGH TO ENCOMPASS NEW ELEMENTS
*    AND USER SUPPLIES KEY NOT BEING IN THE TABLE - HALVE POSITIONS
*    NEW KEY IN THE TABLE,DISPLACES ACCORDINGLY THE OTHER ELEMENTS
*    AND RETURNS ADDRESS AND POSITION OF THE NEW ELEMENT. USER SHOULD
*    FILL IT THEN WITH DATA.
*       TABLE IS DEFINED BY CONTROL BLOCK CALLED "TABLE DEFINITION".
*    USER CAN SPECIFY SO CALLED "COMPARE" EXIT ROUTINE,WHICH PERFORMS
*    COMPARISON OF INPUT KEY WITH KEYS OF TABLE ELEMENTS. THIS EXIT
*    MAKES POSSIBLE PROCESSING OF TABLES WITH COMPLEX KEY STRUCTURE
*    AND WITH ELEMENTS OF VARIABLE LENGTH.
*
* CALL ARGUMENTS LIST FORMAT:
*
*    CALL HALVE, ( TDEF, INPUT_KEY, IF_FOUND_INDICATOR )
*
*    TDEF        - TABLE DEFINITION ( SEE TDEF DSECT FOR FORMAT )
*    INPUT_KEY   - KEY TO BE LOCATED IN THE "TABLE"
*    INDICATOR   - BIT(1) (PL/I ATTR)   ='1'B - INPUT_KEY FOUND IN THE
*                                               "TABLE"
*                                       ='0'B - INPUT_KEY NOT FOUND
*    INPUT-KEY           - INPUT ARGUMENT
*    IF_FOUND_INDICATOR  - OUTPUT ARGUMENT
*    TDEF                - INPUT/OUTPUT ARGUMENT
*
* REGISTERS USAGE :
*
*    PB   - BASE REGISTER
*    FE   - CURRENT SECTION OF TABLE FIRST ELEMENT ADDRESS
*    ME   - CURRENT SECTION OF TABLE MID ELEMENT ADDRESS
*    ME-1 - WORK REG. ASSOCIATED WITH "ME" (FOR DIVIDE & MULTIPLY)
*    LE   - CURRENT SECTION OF TABLE LAST ELEMENT ADDRESS
*    CMPA - "COMPARE" SUBROUTINE ENTRY POINT ADDRESS
*    PLA  - PARAMETER LIST ADDRESS
*    IK   - INPUT KEY ADDRESS
*    CKL  - CHARACTER KEY LENGTH-1
*    OFF  - TABLE ELEMENTS OFFSET
*    R13  - TABLE DEFINITION ADDRESS ( = SAVE AREA ADDRESS )
*
*  Written by: Janek JAKUBEK, OGL
*           March-April 1986
*
         SPACE 2
HALVE1   CSECT                    CSECT NAME
         DC    C'HALVE',AL1(5)
HALVE    SAVE  (14,12)            SAVE REGISTERS
         ENTRY HALVE              ENTRY POINT
         SPACE
*   REGISTERS EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
ME       EQU   R11
* ME-1   EQU   R10
PB       EQU   R9
FE       EQU   R8
LE       EQU   R7
CMPA     EQU   R6
IK       EQU   R5
CKL      EQU   R4
OFF      EQU   R3
PLA      EQU   R1
         SPACE
KEYFF    EQU   X'80'              KEY FOUND ( IN THE TABLE ) FLAG
         SPACE
         BALR  PB,0               SET BASE REGISTER
         USING *,PB
         USING PARMLST,PLA        PARAMETERS LIST ADDRESSABILITY
         L     ME-1,TDEFA         TABLE DEFINITION ADDRESS
         ST    R13,4(ME-1)        CHAIN
         ST    ME-1,8(R13)        SAVE AREAS
         MVC   72(8,ME-1),72(R13) SAVE PL/I SLOTS
         LR    R13,ME-1           CURRENT SAVE AREA
         USING TDEF,R13           TDEF ADDRESSABILITY
         SPACE
*---------------------------------------------------------------------*
*   SET UP OF "COMPARE" ROUTINE ADDRESS                               *
*---------------------------------------------------------------------*
         SPACE
         L     CMPA,KL            CHAR. KEY LENGTH OR PL/I ENTRY ADDR.?
         LA    CMPA,0(0,CMPA)     CLEAN HIGH ORDER BYTE
         CH    CMPA,=H'256'       ....................................?
         BNH   KEYLEN             KEY LENGTH, STANDARD COMPARE CODE--->X
                                  WILL BE USED
         L     CMPA,0(0,CMPA)     EXTERNAL "COMPARE" ROUTINE ADDRESS
         B     HSEQ1                                              ---->
KEYLEN   LR    CKL,CMPA
         BCTR  CKL,0              KEY LENGTH - 1
         LA    CMPA,COMPARE       DEFAULT "COMPARE" ROUTINE ADDRESS
HSEQ1    EQU   *
         SPACE
*---------------------------------------------------------------------*
*  DETERMINATION OF ADDRESSES OF FIRST & LAST+1 ELEMENT OF THE TABLE  *
*---------------------------------------------------------------------*
         SPACE
         L     FE,FEA             FIRST ELEMENT ADDRESS
         LA    FE,0(0,FE)         CLEAR HIGH ORDER BYTE
         L     LE,NA              CURRENT NUMBER OF ELEMENTS IN TABLE
         MH    LE,OFFS            TABLE LENGTH
         AR    LE,FE              LAST ELEMENT+1 ADDRESS
         LH    OFF,OFFS           TABLE ELEMENTS OFFSET
         L     IK,IKA             INPUT_KEY ADDRESS
         LR    ME,LE              INITIALYZE "ME" IF TABLE EMPTY
         CR    FE,LE              TABLE EMPTY ( NA=0 ) ...............?
         BE    NOTFOUND           YES,BYPASS TABLE SEARCH PHASE.......>
         SPACE
*---------------------------------------------------------------------*
*   MAIN  TABLE  PROCESSING  ( BINARY DIVISION & SEARCH ) LOGIC       *
*---------------------------------------------------------------------*
         SPACE
HLOOP    LR    ME,LE
         SR    ME,FE              CURRENT SECTION OF TABLE LENGTH
         XR    ME-1,ME-1          SET EVEN REG. TO ZERO
         DR    ME-1,OFF           LENGTH / OFFSET = NO. OF ELEMENTS
         SRL   ME,1               NO. OF ELEMENTS IN THE SECTION / 2
         MR    ME-1,OFF           MID ELEMENT OFFSET
         AR    ME,FE              MID ELEMENT ADDRESS
         ST    ME,EADR            STORE MID ELEMENT ADDRESS IN TDEF====
         LR    R15,CMPA           "COMPARE" ENTRY POINT ADDRESS
         BALR  R14,R15            ----->  CALL "COMPARE" EXIT
         B     *+4(R15)           TAKE DECISION ACCODRING TO RET.CODE->
         B     EQUAL              INPUT_KEY = KEY IN MID ELEMENT------>
         B     HIGHT              INPUT_KEY > KEY IN MID ELEMENT------>
         SPACE
LESST    DS    0H                 INPUT_KEY < KEY IN MID ELEMENT
         CR    ME,FE              FIRST ELEMENT = LAST................?
         BE    NOTFOUND           YES,GO TO NEXT PHASE---------------->
         LR    LE,ME              NO, PROCESS NEXT SECTION OF THE TABLE
         B     HLOOP                                  ---------------->
         SPACE
HIGHT    DS    0H                 INPUT_KEY > KEY IN THE MID ELEMENT
         AR    ME,OFF             ADDR. OF NEXT ELEMENT AFTER MID
         CR    ME,LE              TABLE FULLY SEARCHED................?
         BE    NOTFOUND           YES, GOTO NEXT PHASE---------------->
         LR    FE,ME              NO, PROCESS NEXT SECTION OF THE TABLE
         B     HLOOP                                  ---------------->
         SPACE
EQUAL    DS    0H                 INPUT_KEY FOUND IN THE TABLE
         L     R15,IFFA           IF_FOUND_FLAG ADDRESS
         OI    0(R15),KEYFF       SET KEY FOUND FLAG  ================
         BAL   R14,SETEPOS        -------> SET-UP ELEMENT POSITION     X
                                           WITHIN THE TABLE
         SPACE
*---------------------------------------------------------------------*
         SPACE
RETURN   DS    0H
         L     R13,4(0,R13)       RESTORE OLD SAVE AREA ADDRESS
         RETURN (14,12)           <-----------------------------------
         SPACE
*---------------------------------------------------------------------*
         SPACE
COMPARE  DS    0H                 DEFAULT "COMPARE" EXIT ROUTINE
         EX    CKL,CLCKEY         COMPARE CHARACTER KEYS
         BH    HIGHT              ---------->
         BL    LESST              ---------->
         BE    EQUAL              ---------->
         SPACE
CLCKEY   CLC   0(1,IK),0(ME)      CHARACTER KEYS COMPARISON...........?
         SPACE 2
*---------------------------------------------------------------------*
*  INPUT KEY NOT FOUND IN THE TABLE                                   *
*  IF  NA < NM  TABLE WILL BE EXPANDED                                *
*---------------------------------------------------------------------*
         SPACE
NOTFOUND DS    0H                 TABLE EXPANTION PHASE OR TERMINATION
         L     R15,IFFA           IF_FOUND_FLAG ADDRESS
         NI    0(R15),X'FF'-KEYFF SET OFF KEY FOUND FLAG===============
         ST    ME,EADR            LOCATED ELEMENT ADDRESS (ELEMENT TO BE
                                  INSERTED BY THE USER) ===============
         L     R6,NA              CURRENT NO. OF ELEMENTS IN THE TABLE
         C     R6,NM              TABLE TO BE EXPANDED................?
         BL    EXPND              YES--------------------------------->
         XC    EPOS,EPOS          TABLE CANNOT BE EXPANDED MARK========
         B     RETURN             ------------------------------------>
         SPACE
*---------------------------------------------------------------------*
*  TABLE EXPANTION ( SORTING ) IN EXPECTATION OF USER UPDATE          *
*---------------------------------------------------------------------*
         SPACE
EXPND    DS    0H
         BAL   R14,SETEPOS        ------->SET LOCATED ELEMENT POSITION
         LA    R6,1(0,R6)         CURRENT NO. OF ELEMENTS + 1
         ST    R6,NA              STORE IN TDEF=======================
         BCTR  R6,0               - 1
         L     FE,FEA             FIRST ELEMENT ADDRESS
         LA    FE,0(0,FE)         CLEAR HIGH ORDER BYTE
         MH    R6,OFFS            NO. OF ELEMENTS * OFFSET = OFFSET OF X
                                  TABLE'S LAST ELEMENT
         AR    R6,FE              LAST ELEMENT ADDRESS
         LR    R4,R6              LAST ELEMENT ADDRESS
         CR    ME,R6              LOC.ELEM.ADDR<LAST ELEM.ADDR........?
         BNL   EXPEX              NO,TABLE MOVEMENT NOT REQUIRED------>
         SPACE
*---------------------------------------------------------------------*
*  ELEMENTS DISPLACEMENT ( SORTING ) LOOP                             *
*---------------------------------------------------------------------*
         SPACE
EXPLP    SR    R4,OFF             ELEMENT-1 ADDRESS
         LH    R7,LEN             ELEMENT LENGTH
         LR    R5,R7              ELEMENT LENGTH
         MVCL  R6,R4              ELEM.-1 INTO--->NEXT ELEMENT MOVE
         SR    R4,OFF             INITIAL ADDRESS (BEFORE MVCL)
         LR    R6,R4              NEXT PAIR OF ELEMENTS
         CR    R4,ME              LOCATED ELEMENT ALREADY MOVED.......?
         BH    EXPLP              NO,PROCEED WITH NEXT ELEM. MOVE----->
         SPACE
*---------------------------------------------------------------------*
*  INITIALIZATION OF LOCATED ELEMENT WITH BINARY ZEROS                *
*---------------------------------------------------------------------*
         SPACE
EXPEX    XR    R4,R4
         LH    R7,LEN             ELEMENT LENGTH
         XR    R5,R5              PAD = X'00'
         MVCL  R6,R4              PROPAGATE BINARY ZEROS===============
         B     RETURN
         SPACE
*---------------------------------------------------------------------*
         SPACE
SETEPOS  DS    0H                 DETERMINATION OF LOCATED ELEMENT     X
                                  POSITION WITHIN THE TABLE
         LR    R5,ME              LOCATED ELEMENT ADDRESS
         L     R4,FEA             FIRST ELEMENT ADDRESS
         LA    R4,0(0,R4)         CLEAR HIGH ORDER BYTE
         SR    R5,R4              LOCATED ELEM.OFFSET(FROM BEGINING)
         BZ    SETEPOS1           THIS IS FIRST ELEMENT IN THE TABLE-->
         XR    R4,R4              ZERO R4
         DR    R4,OFF             ELEMENT'S POSITION - 1
SETEPOS1 LA    R5,1(0,R5)
         ST    R5,EPOS            STORE ELEM. POSITION INTO TDEF=======
         BR    R14                <-------RETURN TO CALLER
         SPACE
         LTORG
         SPACE 2
TDEF     HLVTD DSECT              PROCESSED TABLE DEFINITION
         SPACE 2
PARMLST  DSECT                    INPUT PARAMETERS' ADDRESS LIST
TDEFA    DS    A                  TABLE DEFINITION ADDRESS
IKA      DS    A                  INPUT KEY ADDRESS
IFFA     DS    A                  IF FOUND FLAG ADDRESS
         SPACE
         END   HALVE
