         TITLE 'TBLACCSS - TABLES ACCESS INTERFACE ROUTINE'
* TABLES ACCESS INTERFACE ROUTINE FOR COBOL PROGRAMS
*
* SPECIFICATIONS:
*
* MODULE NAME: TBLACCSS
*
* FUNCTION = SEE BELOW
*
*       THE SUBROUTINE ALLOWS ACCESSING OF TABLES CREATED BY
*    "OFDTBGEN" UTILITY IN COBOL APPLICATION PROGRAMS. IT LOADS
*    A TABLE INTO STORAGE AND ACCESSES ITS ELEMENTS USING "HALVE"
*    BINARY SEARCH SUBROUTINE. REFER TO "OFDTBGEN" AND "HALVE"
*    WRITEUPS FOR MORE INFORMATION ABOUT THE TABLES. "HALVE"
*    SUBROUTINE CAN NOT BE USED DIRECTLY IN A COBOL PROGRAM BECAUSE
*    IT USES ADDRESS (POINTER) TYPE VARIABLES NOT AVAILABLE IN COBOL.
*
* CALL STMT FORMAT (IN COBOL):
*
*    CALL 'TBLACCSS' USING TABLE-NAME TABLE-ELEM ACCESS-TYPE RET-CODE.
*
*    TABLE-NAME  - GROUP DATA ITEM. CONTAINS NAME OF A TABLE (LOAD
*                  MODULE NAME) PLUS TWO FIELDS RESERVED FOR "TBLACCSS"
*                  USE ONLY (SEE THE SAMPLE BELOW).
*    TABLE-ELEM  - GROUP DATA ITEM. ON OUTPUT IT CONTAINS THE REQUESTED
*                  ELEMENT OF A TABLE (IF FOUND). ON INPUT IT HAS TO
*                  HAVE THE KEY OF ELEMENT TO BE LOOKED FOR.
*    ACCESS-TYPE - ONE BYTE CHARACTER DEFINING TYPE OF REQUEST:
*                  "G" - GET TABLE ELEMENT.
*                  "I" - INSERT. TABLE-ELEM HAS TO CONTAIN ELEMENT TO
*                        BE INSERTED (ADDED TO) INTO THE TABLE.
*                  "R" - REPLACE. TABLE-ELEM HAS TO CONTAIN ELEMENT TO
*                        BE REPLACED IN THE TABLE.
*    RET-CODE    - PIC 9(9) COMP (4 BYTES BINARY) ELEMENTARY DATA ITEM.
*                  ON OUTPUT IT CONTAINS RETURN CODE DEPENDING ON
*                  ACCESS-TYPE:
*                  FOR "G": 0 - REQUESTED ELEMENT FOUND IN THE TABLE
*                               AND RETURNED TO THE CALLER.
*                           4 - REQUESTED ELEMENT NOT FOUND IN THE
*                               TABLE.
*                  FOR "I": 0 - REQUESTED ELEMENT INSERTED INTO THE
*                               TABLE.
*                           4 - ELEMENT WITH SPECIFIED KEY ALREADY
*                               EXISTS IN THE TABLE.
*                           8 - TABLE ALREADY FULL. NO NEW ELEMENT CAN
*                               BE ADDED.
*                  FOR "R": 0 - REQUESTED ELEMENT FOUND IN THE TABLE
*                               AND REPLACED.
*                           4 - REQUESTED ELEMENT NOT FOUND IN THE
*                               TABLE AND THEAFORE COULD NOT BE
*                               REPLACED.
*                  IF ACCESS-TYPE DOES NOT SPECIFIY ANY OF THE ABOVE -
*                  RET-CODE = 16 IS RETURNED AND TABLE ISN'T ACCESSED
*                  AT ALL.
*
* WRITTEN BY: JANEK JAKUBEK, OGL
*             MARCH-APRIL 1986
*
         SPACE
TBLACCS1 CSECT                    CSECT NAME
         DC    C'TBLACCSS'        DUMP EYE CATCHER
TBLACCSS SAVE  (14,12)            SAVE REGISTERS
         ENTRY TBLACCSS           ENTRY POINT
         USING TBLACCSS,R15
         SPACE
*   REGISTERS EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         SPACE
PLAR     EQU   R1                 PARAMETER LIST ADDRESS
WRKR1    EQU   R2                 WORK REGISTER 1
TDEFAR   EQU   R7                 TDEF ADDRESS REGISTER
NMSR     EQU   R8                 NM FROM TDEF SAVE REGISTER
         SPACE
KEYFF    EQU   X'80'              KEY FOUND ( IN THE TABLE ) FLAG
         SPACE
         CNOP  0,4                ALIGNEMENT ON A FULLWORD BOUNDARY
         BAL   WRKR1,SAE          SAVE AREA ADDRESS
SAVEA    DS    20F                SAVE AREA (HALVE REQUIRES 20F)
         DROP  R15
         USING SAVEA,WRKR1
SAE      ST    R13,SAVEA+4        CHAIN
         ST    WRKR1,8(R13)       SAVE AREAS
         LR    R13,WRKR1          CURRENT SAVE AREA
         DROP  WRKR1
         USING SAVEA,R13          PROGRAM BASE REGISTER
         SPACE
         USING PARMLST,PLAR       PARAMETERS LIST ADDRESSABILITY
         LM    R3,R6,PARMLST      LOAD ADDRESSES FROM PARM LIST
         USING TBLNAMED,R3        TABLE NAME ADDRESSABILITY
         TM    TBLNAMEA,X'80'     TABLE NAME ONLY SPECIFIED IN CALL...?
         BO    TBLONLY            YES, LOAD OR DELETE REQUEST ONLY---->
         OC    TDEFADDR,TDEFADDR  FIRST ENTRY FOR THIS TABLE..........?
         BNZ   NFE                NO, NOT FIRST ENTRY----------------->
         BAL   R14,LOAD           YES, LOAD TABLE AND HALVE
* SETUP PARM LIST FOR HALVE CALL
NFE      MVC   HCTDEFA,TDEFADDR   TDEF ADDRESS INTO PARM LIST
         ST    R4,HCIKA           INPUT_KEY (TABLE ELEMENT) ADDRESS
         SPACE
         USING TDEF,TDEFAR        TDEF ADDRESSABILITY
         L     NMSR,NM            SAVE NM (MAX.SIZE OF THE TABLE)
         CLI   0(R5),C'G'         GET REQUEST        .................?
         BE    GETREQ             YES, GET REQUEST   ----------------->
         CLI   0(R5),C'I'         INSERT REQUEST     .................?
         BE    INSREQ             YES, INSERT        ----------------->
         CLI   0(R5),C'R'         REPLACE REQUEST    .................?
         BE    REPREQ             YES, REPLACE       ----------------->
         B     INVREQ             INVALID REQUEST SPECIFIED----------->
         SPACE
* GET A TABLE ELEMENT
GETREQ   MVC   NM,NA              LOCK THE TABLE (PREVENT EXPANTION)
         LA    R1,HALVECAL        HALVE CALL PARM LIST ADDRESS
         L     R15,HALVEADR       HALVE ENTRY POINT ADDRES
         BALR  R14,R15            CALL HALVE SUBROUTINE
         ST    NMSR,NM            RESTORE NM (UNLOCK THE TABLE)
         TM    IFFI,KEYFF         WAS REQUESTED ELEMENT FOUND.........?
         BZ    RC4                NOT FOUND, SET RET-CODE = 4 -------->
* TABLE ELEMENT FOUND, MOVE IT INTO TABLE-ELEM
         LR    R10,R4             TABLE-ELEM (OUTPUT) ADDRESS
         LH    R11,LEN            LENGTH OF THE TABLE ELEMENT
         LR    R15,R11
         L     R14,EADR           FOUND TABLE ELEMENT ADDRESS
         MVCL  R10,R14            MOVE ELEMENT INTO OUTPUT FIELD
         B     RC0                SET 0 RET-CODE---------------------->
         SPACE
* INSERT AN ELEMENT INTO THE TABLE
INSREQ   CLC   NM,NA              CAN NEW ELEMENTS BE ADDED...........?
         BNH   RC8                NO, TABLE ALREADY FULL-------------->
         LA    R1,HALVECAL        HALVE CALL PARM LIST ADDRESS
         L     R15,HALVEADR       HALVE ENTRY POINT ADDRES
         BALR  R14,R15            CALL HALVE SUBROUTINE
         TM    IFFI,KEYFF         ELEMENT ADDED TO THE TABLE..........?
         BO    RC4                ELEMENT ALREADY EXIST--------------->
* TABLE ELEMENT INSERTION
         LR    R10,R4             TABLE-ELEM (INPUT) ADDRESS
         LH    R11,LEN            LENGTH OF THE TABLE ELEMENT
         LR    R15,R11
         L     R14,EADR           LOCATED TABLE ELEMENT ADDRESS
         MVCL  R14,R10            MOVE INPUT ELEMENT INTO THE TABLE
         B     RC0                SET 0 RET-CODE---------------------->
         SPACE
* REPLACE A TABLE ELEMENT
REPREQ   MVC   NM,NA              LOCK THE TABLE (PREVENT EXPANTION)
         LA    R1,HALVECAL        HALVE CALL PARM LIST ADDRESS
         L     R15,HALVEADR       HALVE ENTRY POINT ADDRES
         BALR  R14,R15            CALL HALVE SUBROUTINE
         ST    NMSR,NM            RESTORE NM (UNLOCK THE TABLE)
         TM    IFFI,KEYFF         WAS REQUESTED ELEMENT FOUND.........?
         BZ    RC4                NOT FOUND, SET RET-CODE = 4 -------->
* TABLE ELEMENT FOUND, REPLACE IT IN THE TABLE
         LR    R10,R4             TABLE-ELEM (INPUT) ADDRESS
         LH    R11,LEN            LENGTH OF THE TABLE ELEMENT
         LR    R15,R11
         L     R14,EADR           FOUND TABLE ELEMENT ADDRESS
         MVCL  R14,R10            REPLACE ELEMENT IN THE TABLE
         B     RC0                SET 0 RET-CODE---------------------->
         SPACE
* ONLY FIRST ARGUMENT SPECIFIED IN THE CALL, LOAD IF NOT LOADED,
* DELETE REQUEST IF LOADED ALREADY
TBLONLY  OC    TDEFADDR,TDEFADDR  LOAD OR DELETE REQUEST..............?
         BZ    TBLOAD             LOAD BECAUSE ADDRESS IS ZERO-------->
         BAL   R14,DELETE         DELETE BECAUSE LOADED PREVIOUSLY
         B     RETURN             RETURN FROM THE PROGRAM------------->
TBLOAD   BAL   R14,LOAD           LOAD TABLE AND HALVE INTO STORAGE
         SPACE
RETURN   DS    0H
         L     R13,4(0,R13)       RESTORE OLD SAVE AREA ADDRESS
         RETURN (14,12)           <-----------------------------------
         SPACE
SETRC    ST    R15,0(,R6)         SET RET-CODE VALUE
         B     RETURN             RETURN TO THE CALLER---------------->
         SPACE
RC0      SR    R15,R15            NORMAL RETURN CODE
         B     SETRC              STORE IT INTO OUTPUT RET-CODE------->
         SPACE
RC4      LA    R15,4              RET-CODE = 4
         B     SETRC              STORE IT INTO OUTPUT RET-CODE------->
         SPACE
RC8      LA    R15,8              RET-CODE = 8
         B     SETRC              STORE IT INTO OUTPUT RET-CODE------->
         SPACE
INVREQ   DS    0H                 INVALID REQUEST SPECIFIED
         LA    R15,16             SET RET-CODE = 16
         B     SETRC                                  ---------------->
         SPACE
*---------------------------------------------------------------------*
*  LOAD TABLE AND HALVE INTO STORAGE                                  *
*---------------------------------------------------------------------*
LOAD     ST    R14,LEVELA         SAVE RETURN REGISTER
         LOAD  EPLOC=TBLNAME      LOAD THE TABLE INTO STRORAGE
         ST    R0,TDEFADDR        SAVE TABLE ADDRESS
         LR    TDEFAR,R0          SET TDEF ADDRESS REGISTER
         LOAD  EPLOC=HALVE        LOAD HALVE SUBROUTINE INTO STRORAGE
         ST    R0,HALVEADR        SAVE HALVE EP ADDRESS
         L     R14,LEVELA         RESTORE RETURN REGISTER
         BR    R14                RETURN
         SPACE
*---------------------------------------------------------------------*
*  DELETE THE TABLE AND HALVE FROM STORAGE                            *
*---------------------------------------------------------------------*
DELETE   ST    R14,LEVELA         SAVE RETURN REGISTER
         DELETE EPLOC=TBLNAME     DELETE THE TABLE FROM STROAGE
         DELETE EPLOC=HALVE       DELETE HALVE FROM STORAGE
         SR    R0,R0
         ST    R0,TDEFADDR        CLEAR TABLE ADDRESS
         ST    R0,HALVEADR        CLEAR HALVE EP ADDRESS
         L     R14,LEVELA         RESTORE RETURN REGISTER
         BR    R14                RETURN
         SPACE
HALVE    DC    CL8'HALVE'         HALVE SUBROUTINE NAME
LEVELA   DS    A                  LEVEL A SUBROUTINES RETADDR SAVE
         SPACE
HALVECAL DS    0A                 HALVE CALL LIST
HCTDEFA  DS    A                  TDEF ADDRESS
HCIKA    DS    A                  INPUT_KEY ADDRESS
HCFI     DC    X'80',AL3(IFFI)    IF_FOUND_INDICATOR ADDRESS
         SPACE
IFFI     DS    XL1                IF_FOUND_INDICATOR
         LTORG
         SPACE 2
TDEF     HLVTD DSECT              PROCESSED TABLE DEFINITION
         SPACE
PARMLST  DSECT                    INPUT PARAMETERS' ADDRESS LIST
TBLNAMEA DS    A                  TABLE NAME ADDRESS
TBLELEMA DS    A                  TABLE ELEMENT ADDRESS (INPUT)
REQTYPEA DS    A                  REQUEST TYPE ADDRESS
RETCODEA DS    A                  RETURN CODE ADDRESS
         SPACE
TBLNAMED DSECT                    TABLE NAME DSECT
TBLNAME  DS    CL8                TABLE NAME
TDEFADDR DS    A                  TABLE DEFINITION ADDRESS
HALVEADR DS    A                  HALVE ENTRY POINT ADDRESS
         SPACE
         END   TBLACCSS
