/* REXX    */
/* Function: Displays virtual storage usage of an address space.   */
/*                                                                 */
/* Invokes MXI to display address space's LDA. LDA fields are used */
/* to produce REXXSTOR (by Mark Zelden) like display.              */
/* This function depends on MXI command MEM @LDA MAP(LDA) JOB(...) */
/* displaying 64 lines LDA map. If MXI @LDA display/ layout        */
/* changes - this rexx will need to be updated.                    */
/* If any unresonable value, or a value with a decimal fraction    */
/* is displayed - it is a sure sign that either MEM @LDA MAP(LDA)  */
/* layout has changed or there is a corrupted value in LDA.        */
/*                                                                 */
/* Since LDA resides in a foreign address space - an authorized    */
/* program is needed to retrieve it - MXI in this case.            */
/*                                                                 */
/* This exec has to run in a TSO environment (batch or foreground) */
/* because MXI MEM  function is authorized. Will not work          */
/* if invoked via IRXJCL.                                          */
/* Also, a user that runs this has to be authorized to the         */
/* FACILITY class resource MXICMD.MEM                              */
/*                                                                 */
/* Syntax: %MXIVSTOR jobname                                       */
/* or    : %MXIVSTOR ASID(xxxx)                                    */
/*             Where  "xxxx" is a 4 hex digits ASID id             */
/*                                                                 */
/* Prerequisites: MXI needs to be installed authorized and         */
/*                available via LINKLIST/STEPLIB.                  */
/*                                                                 */
/* Written by: Janek Jakubek, CGI MDC                              */
/*             March    2004                                       */
/*                                                                 */
/* Acknowledgements:                                               */
/* This little rexx has been inspired by Mark Zelden's REXXSTOR.   */
/* REXXSTOR code has been used here to produce the display.        */
/*                                                                 */
/* Change log:                                                     */
/*                                                                 */
/* Dec. 06/2005 JJ                                                 */
/* Added MEMLIMIT display (for z/OS 1.2 and above running in       */
/* z/Architecture mode). Code from Mark Zelden's REXXSTOR updated  */
/* on 10/27/2005 has been used.                                    */
/*                                                                 */
/* TRACE R */
parse upper arg jobname
msgid = SYSVAR('SYSICMD')
Numeric digits 14
/*                                                                 */
/* If JOBNAME is not specified - current address space name is used*/
/*                                                                 */
If jobname = '' then jobname = MVSVAR('SYMDEF','JOBNAME' )
ASname = '--------' /* Initial/ null value of Address Space name   */
/*                                                                 */
/* ASID(xxxx) parm processing                                      */
If Substr(jobname,1,5) = 'ASID(' then
  Do
  If Length(jobname) <> 10 then
    Do
    Say 'ASID must be specified as ASID(xxxx) <---- 4 hex digits'
    Exit 4
    End
/* We are going to find the address space name via MXI DA command  */
  dacmd = 'DA A='Substr(jobname,6,4)
  darc = MXIREXX('daline1.','NOTITLES',dacmd)
  If  (darc = 0   & daline1.0 > 1) then
    Do
    /* Extract address space name from MXI DA A=xxxx command output */
    parse var daline1.2 a s ASname discard
    End
  mxicmd = 'MEM @LDA MAP(LDA)' jobname
  End   /* End of ASID(xxxx) parm processing   */
/*                                                                 */
Else    /* Jobname   operand specified/assumed */
   Do
   mxicmd = 'MEM @LDA MAP(LDA) JOB('jobname')'
   End
mxirc = MXIREXX('outline1.','NOTITLES',mxicmd)
If  (mxirc = 0   & outline1.0 = 64) then
  do
  /* Extract hexadecimal values from MXI LDA map display output */
  parse var outline1.21 offsd offsx id len XESIZA discard
  parse var outline1.51 offsd offsx id len XREGRQ discard
  parse var outline1.52 offsd offsx id len XLIMIT discard
  parse var outline1.54 offsd offsx id len XELIM  discard
  parse var outline1.58 offsd offsx id len XLOAL  discard
  parse var outline1.60 offsd offsx id len XELOAL discard
  /* Fix any invalid extended region limit values          */
  /* ( OPSMVS is known to insert an invalid LDAELIM        */
  /*  and LDAEVVRG = X'7FFFFFFF' )                         */
  /*  If  LDAELIM > LDAESIZA then make LDAELIM = LDAESIZA  */
  If X2d(XELIM)  > X2d(XESIZA) then XELIM  = XESIZA
  /* Make REXXSTOR like display                            */
  /* (code from REXXSTOR is used here)                     */
  LDALIMIT = X2d(XLIMIT)                     /* <16m v=v             */
  LDALIMIT = Right(LDALIMIT/1024,9)          /* convert to kbytes    */
  LDALOAL  = X2d(XLOAL)                      /* <16m v=v alloc       */
  LDALOAL  = Right(LDALOAL/1024,9)           /* convert to kbytes    */
  LDAELIM  = X2d(XELIM)                      /* >16m v=v             */
  LDAELIM  = Right(LDAELIM/1024,9)           /* convert to kbytes    */
  LDAELOAL = X2d(XELOAL)                     /* >16m v=v alloc       */
  LDAELOAL = Right(LDAELOAL/1024,9)          /* convert to kbytes    */
  LDAREGRQ = X2d(XREGRQ)                     /* region requested     */
  LDAREGRQ = LDAREGRQ/1024                   /* convert to kbytes    */
  AVAIL    = Right(LDALIMIT-LDALOAL,9)       /* available <16M       */
  EAVAIL   = Right(LDAELIM-LDAELOAL,9)       /* available >16M       */
  call Memlimit
/*********************************************************************/
/* Display results                                                   */
/*********************************************************************/
  Say ''
  title = jobname 'address space virtual storage usage'
  Say title
  underl = ASname'-------------------------------------------------'
  underl = Substr(underl,1,Length(title))
  Say underl
  Say ' '
  Say '        Region requested:' LDAREGRQ'K'
  Say ' '
  Say '                Limit     In-Use      Avail'
  Say 'Below 16M:' LDALIMIT'K' LDALOAL'K' AVAIL'K'
  Say 'Above 16M:' LDAELIM'K' LDAELOAL'K' EAVAIL'K'
  If Show_MEMLIMIT_Display = 1 then ,     /* FLAG set to "true"?  */
    Say 'Above 2G :' Right(RAXLVMEMLIM || MUNITS,10) ,
        '    (64-bit MEMLIMIT)'
  Exit 0
  End
else
  do
  say msgid 'MXI cmd: 'mxicmd' failed or LDA layout is changed'
  say msgid 'MXI cmd return code:' mxirc
  if mxirc <> 0 then
    say msgid 'Most likely address space is not available'
  end
exit
/* MEMLIMIT subroutine                                               */
Memlimit:
/*********************************************************************/
/* MEMLIMIT code (from Mark Zelden's REXXSTOR)                       */
/*********************************************************************/
Show_MEMLIMIT_Display = 0    /* Init flag to "false" - used later    */
CVT      = C2d(Storage(10,4))                /* point to CVT         */
CVTOSLV3 = Storage(D2x(CVT+1267),1)          /* byte 3 of CVTOSLVL   */
FLCARCH  = Storage(A3,1)                     /* FLCARCH in PSA       */
If bitand(CVTOSLV3,'10'x) = '10'x & ,        /* z/OS 1.2 64-bit srvs */
   C2d(FLCARCH) <> 0 then do                 /* non-zero is z/Arch.  */
  Show_MEMLIMIT_Display = 1                  /* Set FLAG to "true"   */
  /* We need help of MXI to get a foreign AS RAX pointer and         */
  /* MEMLIMIT in RAX                                                 */
  dascb  = 'MEM @ASCB MAP(ASCB) JOB('jobname')'
  dasrc = MXIREXX('ascbl1.','NOTITLES',dascb)
  If  (dasrc = 0   & ascbl1.0 >= 119) then
  do
    /* Extract RAX hex pointer from MXI ASCB map display */
    parse var ascbl1.114 offsd offsx id len RAXP   discard
    /* Retrieve MEMLIMIT from RAX+152 (8 bytes)          */
    /* XMLIMP is hex MEMLIMIT pointer                    */
    XMLIMP = Right(D2x(X2d(RAXP)+152),8)
    dmlim  = 'MEM 'XMLIMP' LEN(8) JOB('jobname')'
    dmlrc = MXIREXX('dmlml1.','NOTITLES',dmlim)
    If  (dmlrc = 0   & dmlml1.0 = 1) then
    do
      /* Extract MEMLIMIT from MXI RAX+152 display  */
      parse var dmlml1.1 addrx offsx MLIM1 MLIM2 discard
      RAXLVMEMLIM = X2d(MLIM1||MLIM2)
    end
    /* MEMLIMIT could not be retrieved from RAX */
    else
    do
      Show_MEMLIMIT_Display = 0
      Return
    end
  end
  /* MEMLIMIT could not be retrieved from RAX */
  else
  do
    Show_MEMLIMIT_Display = 0
    Return
  end
  /* We've got MEMLIMIT from RAX                                     */
  /***************************************************************/
  /* The following code is used to display the MEMLIMIT in the   */
  /* largest possible unit.  For example, 1023G and 1025G are    */
  /* displayed as 1023G and 1025G, but 1024G is displayed as 1T. */
  /***************************************************************/
  Select
     When RAXLVMEMLIM < 1024 then do
       MUNITS = 'M'
     End
     When RAXLVMEMLIM >= 1024 & RAXLVMEMLIM < 1048576 then do
       If RAXLVMEMLIM/1024 == TRUNC(RAXLVMEMLIM/1024) then do
         RAXLVMEMLIM = RAXLVMEMLIM/1024
         MUNITS = 'G'
       End
       Else MUNITS = 'M'
     End
     When RAXLVMEMLIM >= 1048576 & RAXLVMEMLIM < 1073741824 then do
       If RAXLVMEMLIM/1048576 == TRUNC(RAXLVMEMLIM/1048576) then do
         RAXLVMEMLIM = RAXLVMEMLIM/1048576
         MUNITS = 'T'
       End
       Else do
         RAXLVMEMLIM = RAXLVMEMLIM/1024
         MUNITS = 'G'
       End
     End
     When RAXLVMEMLIM >= 1073741824 & ,
          RAXLVMEMLIM <= 17591112302592 then do
       If RAXLVMEMLIM/1073741824 == TRUNC(RAXLVMEMLIM/1073741824) ,
          then do
         RAXLVMEMLIM = RAXLVMEMLIM/1073741824
         MUNITS = 'P'
       End
       Else do
         RAXLVMEMLIM = RAXLVMEMLIM/1048576
         MUNITS = 'T'
       End
     End
     When RAXLVMEMLIM = 17592186040320 then do
         RAXLVMEMLIM = 'NOLIMIT'   /* 16384P */
         MUNITS = ''
     End
     Otherwise say 'Error in MEMLIMIT code. Contact Mark Zelden.'
  End /* select */
End /* If bitand(CVTOSLV3,'10'x) */
return
