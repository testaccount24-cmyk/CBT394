
Tables Access Interface Routine for COBOL Programs
--------------------------------------------------

Specifications:

Module name: TBLACCSS

Function = see below

    The subroutine allows accessing of tables created by JJTBGEN
 utility in COBOL application programs. It loads a table into storage
 and accesses its elements using HALVE binary search subroutine.
 Refer to JJTBGEN and HALVE writeups for more information about
 the tables. HALVE subroutine cannot be used directly in a COBOL
 program because it uses address (pointer) type variables not available
 in COBOL (*1).

CALL statement format (in COBOL):

 CALL 'TBLACCSS' USING TABLE-NAME TABLE-ELEM ACCESS-TYPE RET-CODE.

 TABLE-NAME  - Group data item. Contains name of a table (load module
               name) plus two fields reserved for TBLACCSS use only
               (see sample below).
 TABLE-ELEM  - Group data item. On output it contains the requested
               element of a table (if found). On input it has to have
               the key of an element to be looked for.
 ACCESS-TYPE - one byte character defining type of request:
               G - get table element.
               I - insert. TABLE-ELEM has to contain element to be
                   inserted (added to) into the table.
               R - replace. TABLE-ELEM has to contain a replacement
                   of a table element.
 RET-CODE    - PIC 9(9) COMP (4 bytes binary) elementary data item.
               On output it contains a return code depending on
               ACCESS-TYPE:
               for G : 0 - requested element found in the table and
                           returned to the caller.
                       4 - requested element not found in the table.
               for I : 0 - requested element inserted into the table.
                       4 - element with specified key already exists
                           in the table.
                       8 - table already full. No new elements can be
                           added.
               for R : 0 - requested element found in the table and
                           replaced.
                       4 - requested element not found in the table and
                           therefore could not be replaced.
               If ACCESS-TYPE does not specify any of the above -
               RET-CODE = 16 is returned and table isn't accessed at
               all.

Sample coding in COBOL:

...
01 TABLE-NAME.
   02 NAME           PIC X(8)  VALUE "STORETBL".
   02 TABLE-POINTER  PIC 9(9)  COMP VALUE ZERO.
   02 HALVE-POINTER  PIC 9(9)  COMP VALUE ZERO.
...
01 TABLE-ELEM.
   02 STORE-NUMBER   PIC X(3).
   02 STORE-CODE     PIC X.
   02 STORE-NAME     PIC X(20).
...
77 ACCESS-TYPE       PIC X.
77 RET-CODE          PIC 9(9)  COMP.
...
MOVE "G" TO ACCESS-TYPE.
MOVE STORE-NUMBER OF ORDER-RECORD  TO  STORE-NUMBER OF TABLE-ELEM.
CALL "TBLACCSS" USING TABLE-NAME TABLE-ELEM ACCESS-TYPE RET-CODE.
IF RET-CODE IS NOT ZERO ...........
...

End of sample.

Any data names can be chosen by the programmer. For standardization
purposes it is recomended that TABLE-NAME and TABLE-ELEM are predefined
as copybooks for each table in the installation.  TABLE-POINTER and
HALVE-POINTER are reserved for TBLACCSS use only. It stores there the
addresses of the table and HALVE which are loaded into storage during
first call. TBLACCSS can be called with first argument (TABLE-NAME)
only. TBLACCSS understands such a call as a request to either LOAD or
DELETE from storage the table and HALVE subroutine. If TABLE-POINTER
is zero during such a call - table and HALVE are loaded into storage
and their addresses saved, otherwise they are deleted from storage
and TABLE-POINTER and HALVE-POINTER initialyzed to zero.


Written by: Janek JAKUBEK, OGL
            March-April 1986

(*1) - This may no longer be true with newer than OS/VS COBOL compilers.
