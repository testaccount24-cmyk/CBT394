//*.......  JOB  ....YOUR JOBCARD......
//*
//ASM      EXEC PGM=ASMA90,PARM='OBJECT,NODECK,LINECOUNT(64)'
//SYSPRINT DD SYSOUT=*
//SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR
//         DD DSN=SYS1.MODGEN,DISP=SHR
//         DD DISP=SHR,DSN=CBT.FILE394.PDS PRIVATE MACROS FROM CBT394
//SYSPUNCH DD DUMMY
//SYSUT1   DD UNIT=VIO,SPACE=(1024,(120,120))
//SYSLIN   DD UNIT=VIO,SPACE=(3040,(40,40),RLSE),
//            DCB=(RECFM=FBS,LRECL=80,BLKSIZE=0),
//            DSN=&&SYSLIN,DISP=(NEW,PASS)
//SYSIN    DD *
         TITLE 'TEST DATA GENERATION ROUTINE'
* TEST DATA GENERATION ROUTINE
*
* SPECIFICATIONS:
*
* MODULE NAME: JJDGEN
*
* ATTRIBUTES : NONE
*
* PRIVATE MACROS : "SUBENT" - ENTRY INTO INTERNAL SUBROUTINE
*                  "SUBRET" - EXIT FROM AN INTERNAL SUBROUTINE
*
* FUNCTION = SEE BELOW
*
*       THIS ROUTINE GENERATES TEST DATA FOR PROGRAM TESTING PURPOSES.
*    OUTPUT FILE CAN HAVE F,V,U RECORD FORMATS. RECFM, LRECL AND
*    BLKSIZE HAVE TO BE SPECIFIED IN JCL FOR OUTPUT FILE.
*    INPUT IS ON 80 BYTES RECORDS AND DATA ARE SPECIFIED IN ASSEMBLER
*    CONSTANTS LIKE FORMAT. RECORD DATA CAN BE SPECIFIED IN COLUMNS
*    1 TO 71. COL 72 IS RESERVED FOR RECORD CONTINUATION MARK. IF COL
*    72 IS DEFERENT FROM BLANK IT MEANS THAT RECORD DEFINITION IS
*    CONTINUED ON NEXT INPUT CARD. IF LENGTH OF SPECIFIED DATA IS LESS
*    THAN LRECL ( IN CASE OF F TYPE RECORDS ) , MISSING PART IS PADDED
*    WITH BLANKS OR PAD CHARACTER SPECIFIED IN PARM. IF ALIGNMENT TAKE
*    PLACE WITHIN A RECORD (FOR TYPE H,F,E,D OR L CONSTANTS), NON USED
*    BYTES ARE PADDED ALSO WITH PAD CHARACTER.
*    INPUT RECORD WHICH DOES NOT HAVE CONTINUATION MARK IS CONSIDERED
*    AS THE LAST SOURCE OF DATA FOR ONE OUTPUT RECORD. NEXT INPUT
*    RECORD AFTER IT IS CONSIDERED AS BEGINING OF NEXT OUTPUT RECORD
*    SPECIFICATION.
*    THE FOLLOWING TYPE OF CONSTANTS MAY BE SPECIFIED WHILE DEFINING
*    A DATA RECORD:
*                 C - CHARACTER
*                 X - HEXADECIMAL
*                 P - PACKED DECIMAL
*                 Z - ZONED DECIMAL ( SIGNED )
*                 H - BINARY HALFWORD ( SIGNED )
*                 F - BINARY FULLWORD ( SIGNED )
*                 A - BINARY, UNSIGNED
*                 E - SHORT FLOATING POINT
*                 D - LONG  FLOATING POINT
*                 L - EXTENDED  FLOATING POINT
*
*    CONSTANT SPECIFICATION CONSISTS OF FOUR SUBFIELDS:
*
*    DUPLICATION FACTOR, TYPE, MODIFIERS, NOMINAL VALUE(S).
*
*    DETAILED DESCRIPTION OF THE CONSTANT SUBFIELDS MAY BE FOUND IN
*    ASSEMBLER LANGUAGE MANUAL.
*
*    NOMINAL VALUE(S) ARE ENCLOSED IN QUOTES (C,X,P,Z,H,F,E,D,L TYPE
*    CONSTANTS) OR IN PARENTHESIS (A TYPE CONSTANTS).
*
*       DUPLICATION FACTOR AND MODIFIERS LIKE IN ASSEMBLER CONSTANTS
*    ARE OPTIONAL. THE ONLY ALLOWED MODIFIER FROM ASSEMBLER LANGUAGE IS
*    LENGTH. UNLIKE IN ASSEMBLER LENGTH IS NOT PERMITTED IN H AND F
*    TYPE CONSTANTS. LENGTH MODIFIER FOR TYPE "A" CONSTANTS HAS TO BE
*    IN 1 TO 4 RANGE, FOR TYPE "P" FROM 1 TO 8, FOR TYPE "Z" FROM 1 TO
*    15.
*    MULTIPLE NOMINAL VALUES ARE NOT PERMITTED ONLY IN
*    "C" TYPE OF CONSTANTS ( MULTIPLE NOMINAL VALUES ARE SEPARATED BY
*    A COMMA ). SCALE AND EXPONENT MODIFIERS ARE NOT PERMITTED.
*    NUMERIC VALUES HAVE TO BE CODED AS DECIMAL SELF DEFINING TERMS.
*    NO EXPRESSIONS ARE ALLOWED. NUMERIC CONSTANTS CAN HAVE ONLY UP TO
*    15 DIGITS SPECIFIED (SIGNIFICANT DIGITS FOR FLOATING POINT CONSTS)
*    BIT-LENGTH SPECIFICATION IS NOT ALLOWED.
*    RULES OF PADDING AND TRUNCATION OF CONSTANTS AND OF IMPLICIT
*    LENGTH ARE THE SAME AS IN ASSEMBLER LANGUAGE.
*       IN ADDITION TO LENGTH MODIFIER, OFFSET MODIFIER ( "O" ) - NOT
*    KNOWN IN ASSEMBLER, CAN BE SPECIFIED. IF PRESENT - IT INDICATES
*    OFFSET IN GENERATED RECORD AT WHICH THIS CONSTANT SHOULD START.
*    THIS MAY MAKE EASIER CREATION OF RECORDS WHICH CONTAIN ONLY DATA
*    USED BY TESTED PROGRAM. SAMPLE CONSTANT SPECIFICATION WITH OFFSET
*    MODIFIER IS:    XL13O55'0123456789ABCDEF'   - LENGTH OF THIS DATA
*    IS 13 BYTES AN THEY WILL BE PUT AT OFFSET 55 IN OUTPUT RECORD.
*    OVERLAYING OF EARLIER SPECIFIED DATA THROUGH OFFSET SPECIFICATION
*    IS PERMITTED BUT IT DOES NOT CHANGE AVAILABLE BYTE COUNT ("ABC")
*    IN OUTPUT RECORD UNLESS OFFSET OF LAST BYTE OF THIS CONSTANT IS
*    GREATER THAN "ABC". "ABC" IS OFFSET OF NEXT BYTE IN OUTPUT
*    RECORD PAST LAST SPECIFIED CONSTANT. IT POINTS TO FIRST BYTE IN
*    NOT YET DEFINED PART OF THE RECORD.
*    IF OFFSET IS GREATER THAN "ABC" - UNDEFINED PART OF RECORD WILL BE
*    FILLED WITH PAD CHARACTER AND "ABC" WILL BE CHANGED ACCORDINGLY.
*       CONSTANTS ON INPUT RECORD ARE SEPARATED BY ONE OR MORE BLANKS.
*    SPECIFICATION OF A CONSTANT MAY BE CONTINUED ON THE NEXT INPUT
*    RECORD STARTING IN COLUMN 1.
*       SPECIFICATION OF CONSTANTS MAY BE INTERMIXED WITH COMMENTS FOR
*    DOCUMENTATION PURPOSES. COMMENT SPECIFICATION BEGINS WITH "/*" AND
*    ENDS WITH "*/"   E.G.  /* THIS IS COMMENT */  .
*    INPUT RECORD MAY CONTAIN COMMENT(S) ONLY.
*       IN CASE OF V AND U TYPE OF OUTPUT RECORDS LENGTH OF EVERY
*    GENERATED RECORD IS EQUAL TO LAST VALUE OF "ABC".
*
*    INPUT TO THE ROUTINE:
*
*         . SYSIN  - INPUT DATA
*
*    OUTPUT:
*
*         . SYSUT1   - OUTPUT FILE. DCB (RECFM,LRECL,BLKSIZE) HAS TO
*                      BE SPECIFIED IN JCL.
*         . SYSPRINT - MESSAGES AND PRINTOUT OF INPUT DATA
*
*    PARM FORMAT:
*
*         PAD=C|X"NN",ALIGN  ,LINECNT=NN
*                     NOALIGN
*
*    "PAD" SPECIFIES PADDING CHARCTER EITHER IN CHARACTER OR HEXADEC.
*     FORMAT. PADDING TAKES PLACE IF LENGTH OF SPECIFIED DATA IS LESS
*     THAN LRECL OF F TYPE RECORDS AND IF OFFSET MODIFIERS ARE USED
*     CAUSING PARTS OF THE RECORD TO BE LEFT UNDEFINED.
*     DEFAULT IS BLANK ( X'40' ).
*
*    "ALIGN" AND "NOALIGN" ARE MUTUALLY EXCLUSIVE PARMS AND SPECIFY
*    IF H,F,E,D AND L TYPE CONSTANTS ARE TO BE ALIGNED ON THE PROPER
*    BOUNDARIES. JJDGEN ASSUMES THAT GENERATED RECORD BEGINS ON
*    A DOUBLEWORD BOUNDARY. DEFAULT IS "NOALIGN".
*    IF ALIGNMENT TAKES PLACE UNUSED BYTES ARE PADDED WITH "PAD"
*    CHARACTER.
*
*    "LINECNT" SPECIFIES PAGE LINE COUNT FOR SYSPRINT. DEFAULT IS 64.
*    SPECIFICATION OF LARGE VALUE WILL ELIMINATE PAGING ALLTOGETHER.
*
* SAMPLE JCL TO RUN THE PROGRAM :
*
* //TDGEN   EXEC PGM=JJDGEN,PARM='PAD=X''00'',NOALIGN'
* //SYSUT1    DD UNIT=DISK,SPACE=(TRK,(1,1)),DSN=&&TEST.DATA.FILE,
* //             DCB=(RECFM=FB,LRECL=100,BLKSIZE=4000),DISP=(,PASS)
* //SYSPRINT  DD SYSOUT=*
* //SYSIN     DD *
* CL8'KEY1' PL4'-286.45' 5X'18' 10C'XXX' H'28' F'123456'   AL1(5)
* CL8'KEY2' PL4'+286.45' 5X'19' 10C'YYY' H'15' F'234567'   AL1(6)
* CL8'KEY3' PL4'135.24'  5X'1A' 10C'ZZZ' H'10' F'-345678'  AL2(6)
* CL8'KEY4' PL4'200.00'  5X'1B' 10C'AAA' H'9'  F'+4567890' AL3(6)
* CL8'KEY5' PL4'1000'    5X'28' 10C'BBB' H'50' F'1'        A(6)
* CL8'KEY6' PL4'-2000'   5X'38' 10C'CCC' H'99' F'2'        AL1(255)
* 8X'FF' /* END-OF-FILE RECORD */                          AL1O55(111)
*
*
* WRITTEN BY: JANEK JAKUBEK, OGL
*                JULY-AUGUST 1983
*
* CHANGE ACTIVITY:
*        NOV-DEC  1984: FLOATING POINT TYPE "E", "D" AND "L"
*                       TYPE CONSTANTS ADDED.
*        DECEMBER 1984: TYPE "Z" ( ZONED DECIMAL ) CONSTANT ADDED
*
*        OCTOBER  1985: ERROR FIXED - ERROR SIGNALED WHEN ENDING
*                       QUOTE SPECIFIED IN COLUMN 71 FOR TYPE "C"
*                       CONSTANT.
         SPACE
         MACRO
&LAB     ERMSG &MSGT
         LCLC  &MSGNO             MESSAGE NUMBER
&MSGNO   SETC  'MSG'.'&SYSNDX'
&LAB     DC    AL1(L'&MSGNO-1)    MESSAGE LENGTH - 1
&MSGNO   DC    C&MSGT
         MEND
         SPACE
JJDGEN1  CSECT                    CSECT NAME
         DC    C'JJDGEN ',AL1(7)
         TSTAMP
         PRINT NOGEN
JJDGEN   SAVE  (14,12)            SAVE REGISTERS
         USING JJDGEN,R15
         ENTRY JJDGEN             ENTRY POINT
         SPACE
* REGISTERS EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
* R0,R1,R2,R3,R14,R15 - WORK REGISTERS
         SPACE
*   BITS EQUATES
BIT0     EQU   X'80'
BIT1     EQU   X'40'
BIT2     EQU   X'20'
BIT3     EQU   X'10'
BIT4     EQU   X'08'
BIT5     EQU   X'04'
BIT6     EQU   X'02'
BIT7     EQU   X'01'
         SPACE
WRKR1    EQU   R2                 WORK REGISTER 1
         SPACE
         L     R1,0(0,R1)         PARM FIELD ADDRESS
         ST    R1,PARMA           SAVE PARM ADDRESS
         L     R0,DSAS            DSA SIZE
         GETMAIN R,LV=(0)         GET STORAGE FOR DSA
         USING DSA,R1
         ST    R13,SA+4           CHAIN
         ST    R1,8(R13)          SAVE AREAS
         LR    R13,R1             CURRENT SAVE AREA
         DROP  R1
         USING DSA,R13            DSA ADDRESSABILITY
         DROP  R15
         BALR  R12,0              SETUP PROGRAM ADDRESSABILITY
         USING *,R12,R11,R10
         LA    R11,2048(0,R12)    SECOND BASE REGISTER
         LA    R11,2048(0,R11)
         LA    R10,2048(0,R11)    THIRD  BASE REGISTER
         LA    R10,2048(0,R10)
         BAL   R14,INIT           INITIALIZATION
         SPACE
*  OPEN MESSAGE FILE ( PRINT )
         SPACE
         OPEN  (PRINT,(OUTPUT))
         TM    PRINT+48,DCBOFOPN  OPEN SUCCESSFUL        .............?
         BNO   PRTOPNER           NO, OPEN ERROR         ------------->
         SPACE
         BAL   R14,PARMPROC       PARM FIELD PROCESSING
         SPACE
*  OPEN INPUT FILE ( TEST DATA DEFINITION )
         SPACE
         OPEN  (SYSIN,(INPUT))
         TM    SYSIN+48,DCBOFOPN  OPEN SUCCESSFUL        .............?
         BNO   SINOPNER           NO, OPEN ERROR         ------------->
         SPACE
*  OPEN OUTPUT FILE ( RESULTING TEST DATA )
         SPACE
         OPEN  (OUTF,(OUTPUT))
         TM    OUTF+48,DCBOFOPN   OPEN SUCCESSFUL        .............?
         BNO   OUTOPNER           NO, OPEN ERROR         ------------->
*  CHECK IF VALID RECORD FORMAT
         TM    OUTF+36,DCBRECU    UNDEFINED              .............?
         BO    OUTRFMU            YES, O.K.              ------------->
         TM    OUTF+36,DCBRECF    FIXED LENGTH           .............?
         BO    OUTRFMF            YES, O.K.              ------------->
         TM    OUTF+36,DCBRECV    VARIABLE               .............?
         BNO   INVRECFM           NO, INVALID RECORD FORMAT----------->
         TM    OUTF+36,DCBRECSB   VARIABLE SPANNED RECORDS............?
         BO    INVRECFM           YES, INVALID RECORD FORMAT---------->
         OI    FLAGS,RECFMV       RECFM=V SPECIFIED FOR SYSUT1
         MVC   LRECL,OUTF+82      MAX RECORD LENGTH = LRECL
         B     START
OUTRFMF  OI    FLAGS,RECFMF       RECFM=F SPECIFIED FOR SYSUT1
         MVC   LRECL,OUTF+82      RECORD LENGTH = LRECL
         B     START
OUTRFMU  OI    FLAGS,RECFMU       RECFM=U SPECIFIED FOR SYSUT1
         MVC   LRECL,OUTF+62      MAX RECORD LENGTH = BLKSIZE
         B     START
         SPACE
START    DS    0H                 START OF PROCESSING OF INPUT DATA
PROCESOR DS    0H                 PROCESS ONE OUTPUT RECORD
         BAL   R14,INITOR         INITIALIZATION FOR NEW OUTPUT RECORD
         BAL   R14,PROCIND        PROCESSING OF INPUT DATA
         BAL   R14,WRITEOR        WRITE OUTPUT RECORD
         B     PROCESOR           PROCESS NEXT OUTPUT RECORD
         SPACE
EOF      DS    0H                 END OF INPUT FILE
         TM    FLAGS2,CONTEXP     WAS CONTINUATION EXPECTED...........?
         BO    EOFCEXP            YES, PRINT ERROR MSG     ----------->
         BAL   R14,WRITEOR        NO, WRITE LAST OUTPUT RECORD
         B     EOP                PRINT EOP MESSAGE        ----------->
EOFCEXP  LA    R1,EXPCNRM         EXPECTED CONTINUATION NOT REC. MSG
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         SPACE
*  END OF PROCESSING
         SPACE
EOP      BAL   R14,EOPMSG         END OF PROCESSING MESSAGE
         BAL   R14,CLOSE          CLOSE REWIND TAPE
         CLOSE (PRINT)            CLOSE REPORT FILE
         SPACE
RET0     XR    R15,R15            RC=0
RET      L     R0,DSAS            DSASIZE
         LR    R1,R13             DSA ADDRESS
         L     R13,SA+4           PREVIOUS SAVE AREA ADDRESS
         FREEMAIN R,LV=(0),A=(1)  FREEMAIN DSA
         RETURN (14,12),RC=(15)
         SPACE
DSAS     DC    A(DSAE-DSA)        DSA SIZE
PARMA    DS    A                  ADDRESS OF PARM FIELD
TIOTA    DS    A                  ADDRESS OF TIOT
         SPACE
RC16     LA    R15,16             RC FROM SAVE = 16
         B     RET                RETURN
         SPACE 2
SINOPNER DS    0H                 SYSIN OPEN ERROR
         MVC   MSGREC1(L'SINOPNEM),SINOPNEM
         BAL   R14,PRNTMSG        PRINT MESSAGE
         B     RC16               TERMINATE WITH RC=16
         SPACE 2
OUTOPNER DS    0H                 SYSUT1 OPEN ERROR
         MVC   MSGREC1(L'OUTOPNEM),OUTOPNEM
         BAL   R14,PRNTMSG        PRINT MESSAGE
         B     RC16               TERMINATE WITH RC=16
         SPACE 2
PRTOPNER DS    0H                 PRINT DCB OPEN ERROR
         MVC   PRTOPNEM+4(8),JOBNAME JOB NAME INTO MESSAGE TEXT
         WTO   MF=(E,PRTOPNEM)    WTO   ERROR MESSAGE
         B     RC16               RETURN CODE = 16
         SPACE 2
INVRECFM DS    0H                 SYSUT1 INVALID RECORD FORMAT
         MVC   MSGREC1(L'INVRFMM),INVRFMM
         BAL   R14,PRNTMSG        PRINT MESSAGE
         B     RC16               TERMINATE WITH RC=16
         SPACE 3
*---------------------------------------------------------------------*
*                                                                     *
*  MAJOR PROCESSING OF INPUT RECORDS DATA ( ONE OUTPUT RECORD )       *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
PROCIND  SUBENT
DUPFL    EQU   R4                 LENGTH OF DUPLICATION FACTOR
DUPFA    EQU   R5                 ADDR.OF DUP. FACTOR DIGIT IN OUTWA
OFFSL    EQU   R4                 LENGTH OF OFFSET MODIFIER
OFFSA    EQU   R5                 ADDR.OF OFFSET MODIF. DIGIT IN OUTWA
LENML    EQU   R4                 LENGTH OF LENGTH MODIFIER
LENMA    EQU   R5                 ADDR.OF LENGTH MODIF. DIGIT IN OUTWA
CVALL    EQU   R4                 LENGTH OF CONSTANT'S VALUE
CVALA    EQU   R5                 ADDR.OF CONST.VALUE CHAR.IN OUTWA
SCANADR  EQU   R6                 CURRENTLY SCANNED CHARACTER ADDRESS
SCANLEN  EQU   R7                 LENGTH OF CURRENTLY SCANNED STRING
ABC      EQU   R8                 AVAILABLE BYTE COUNT IN OUTPUT RECORD
         BAL   R14,GETNREC        GET FIRST INPUT RECORD
*  SEARCH EITHER : START OF COMMENT OR
*                  DUPLICATION FACTOR OR
*                  TYPE OF CONSTANT
PIDCDT   BAL   R14,NEWCNSTI       INITIALYZATION FOR A NEW CONSTANT
         LR    R1,SCANLEN         SCAN STRING LENGTH
         BCTR  R1,0               SCAN STRING LENGTH - 1
         EX    R1,TRTSCAN         EXECUTE TRANSLATE AND TEST
         BC    8,PIDNMC           NO MORE CONSTANTS OR COMMENTS ON THIS
*                                 RECORD
         LA    SCANADR,0(0,R1)    FOUND CHARACTER ADDRESS
         LA    SCANLEN,REC80+71
         SR    SCANLEN,SCANADR    LEFT UNSCANNED STRING LENGTH
         STC   R2,FUNBYTE         FUNCTION BYTE
         CLI   FUNBYTE,INVCHC     INVALID CHARACTER FOUND.............?
         BE    PID1INVC           YES, ERROR             ------------->
         OI    FLAGS1,CONPINP     CONSTANT PROCESSING IN PROGRESS FLAG
         LA    R0,72              COLUMN OF CURRENTLY PROCESSED CONST.
         SR    R0,SCANLEN
         ST    R0,CCCOL           SAVE CURRENT CONST.COLUMN
         MVC   CCIRECN,IRECNT     CURRENT CONSTANT RECORD NUMBER
         MVI   TRT+X'40',INVCHC   BLANK WILL NOT BE IGNORED FROM NOW
         CLI   FUNBYTE,NUMERIC    NUMERIC FOUND          .............?
         BE    PIDUPFE            DUPLICATION FACTOR     ------------->
         CLI   FUNBYTE,SLASH      POSSIBLE START OF COMMENT...........?
         BE    PIDCOMMP           YES, MAY BE START OF COMMENT ------->
         B     PIDTYPEF           TYPE SUBFIELD FOUND    ------------->
* PROBABLY START OF DUPLICATION FACTOR SPECIFICATION
PIDUPFE  MVI   TRT+X'40',INVCHC   BLANKS NOW INVALID
         MVI   TRT+C'/',INVCHC    START OF COMMENT INVALID
PIDUPF   MVC   0(1,DUPFA),0(SCANADR) MOVE FIRST DIGIT OF DUPLICATION
*                                 FACTOR INTO OUTPUT FIELD
         LA    DUPFL,1(0,DUPFL)   DUPLICATION FACTOR LENGTH + 1
         LA    DUPFA,1(0,DUPFA)   ADDRESS OF NEXT DUPLICATION CHARACTER
         LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT............?
         BNP   PIDUPFC            NO, CHECK IF CONTINUED ON NEXT CARD->
PIDUPF0  EX    R0,TRTSCAN         ONLY ONE CHAR IS SCANNED
         STC   R2,FUNBYTE         FUNCTION BYTE
         CLI   FUNBYTE,NUMERIC    NUMERIC CHARACTER    ...............?
         BE    PIDUPF             YES, O.K., CONTINUE  --------------->
         CLI   FUNBYTE,INVCHC     INVALID CHARACTER    ...............?
         BE    PID2INVC           YES, INVALID CHAR WITHIN DUPF------->
*  FUNCTION BYTE AFTER DUPLICATION CHARACTER FOUND
         CH    DUPFL,=H'5'        DUP FACTOR HAS MORE THAN 5 DIGITS...?
         BH    PIDUPFLE           YES, DUP FACTOR LENGTH ERROR-------->
         MVI   VALSIGN,C'+'       POSITIVE VALUE
         BAL   R14,CONVB          CONVERT DECIMAL CONSTANT TO BINARY
         C     DUPFL,=F'32768'    MAX VALUE OF DUPLICATION FACTOR EXC.?
         BH    PIDUPFLE           YES, DUP FACTOR LENGTH ERROR........?
         ST    DUPFL,DUPF         SAVE DUPLICATION FACTOR VALUE
         OI    FLAGS1,DUPFP       DUPLICATION FACTOR PRESENT FLAG
         SPACE
*  TYPE SUBFIELD FOUND
         SPACE
PIDTYPEF DS    0H                 TYPE SUBFIELD FOUND
         MVI   TRT+X'40',INVCHC   BLANKS NOW INVALID
         MVI   TRT+C'/',INVCHC    START OF COMMENT INVALID
         MVI   TRT+C'A',INVCHC    TYPE FILED INVALID ANY MORE
         MVI   TRT+C'C',INVCHC
         MVI   TRT+C'F',INVCHC
         MVI   TRT+C'H',INVCHC
         MVI   TRT+C'P',INVCHC
         MVI   TRT+C'X',INVCHC
         MVI   TRT+C'E',INVCHC
         MVI   TRT+C'D',INVCHC
         MVI   TRT+C'Z',INVCHC
         MVC   TYPE,FUNBYTE       SAVE TYPE CODE
         CLI   TYPE,TYPEA         TYPE = A             ...............?
         BE    PIDTFA             YES                  --------------->
         MVI   TYPEVLD,C''''      VALUE LEFT DELEIMITER
         MVI   TYPEVRD,C''''      VALUE RIGHT DELIMITER
         B     PIDTF0             BRANCH AROUND
PIDTFA   MVI   TYPEVLD,C'('       VALUE LEFT DELEIMITER
         MVI   TYPEVRD,C')'       VALUE RIGHT DELIMITER
PIDTF0   LA    SCANADR,1(0,SCANADR) NEXT SCAN CHARACTER ADDRESS
         SH    SCANLEN,=H'1'      LENGTH OF SCAN STRING - 1
         BNP   PIDTFC             CHECK IF CONSTANT CONTINUED ON NEXT R
PIDTF1   CLC   0(1,SCANADR),TYPEVLD VALUE LEFT DELIMITER..............?
         BE    PIDVLD             YES, VALUE LEFT DELIMITER FOUND----->
         CLI   0(SCANADR),C'O'    OFFSET MODIFIER       ..............?
         BE    PIDOFFM            YES, OFFSET MODIFIER SPECIFIED------>
         CLI   0(SCANADR),C'L'    LENGTH MODIFIER       ..............?
         BE    PIDLENM            YES, LENGTH MODIFIER SPECIFIED------>
         B     PID3INVC           INVALID CHARACTER AFTER TYPE FIELD-->
         SPACE
*  PROCESSING OF OFFSET MODIFIER
         SPACE
PIDOFFM  TM    FLAGS1,OFFSP       OFFSET MODIFIER ALREADY SPECIFIED..?
         BO    PIDOFFME           YES,ERROR,DUPLICATE SPECIFICATION-->
         SR    OFFSL,OFFSL        OFFSET STRIN LENGTH = 0 INITIALLY
         L     OFFSA,OUTRWAA      WORK AREA ADDRESS FOR OFFSET STRING
PIDOFFM1 LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      LENGHT OF SCAN STRING
         BNP   PIDOFFMC           CONTINUATION EXPECTED AT THIS POINT->
PIDOFMC1 EX    R0,TRTSCAN         ONLY ONE CHARACTER IS CHECKED
         STC   R2,FUNBYTE         FUNCTION BYTE
         CLI   FUNBYTE,NUMERIC    NUMERIC CHARACTER      .............?
         BNE   PIDOFFMX           NO, END OF OFFSET MODIFIER---------->
         MVC   0(1,OFFSA),0(SCANADR) MOVE OFFSET DIGIT INTO OUT FIELD
         LA    OFFSL,1(0,OFFSL)   LENGTH OF OFFSET STRING + 1
         LA    OFFSA,1(0,OFFSA)   ADDRESS OF NEXT OUT.OFFS.CHAR.
         B     PIDOFFM1           CHECK NEXT OFFSET CHAR ------------->
PIDOFFMX LTR   OFFSL,OFFSL        OFFSET LENGTH > 0      .............?
         BNP   PIDOFFME           NO, OFFSL = 0, ERROR   ------------->
         CH    OFFSL,=H'5'        OFFSET LENGTH MORE THAN 5 DIGITS....?
         BH    PIDOFFME           YES, ERROR             ------------->
         MVI   VALSIGN,C'+'       POSITIVE VALUE
         BAL   R14,CONVB          CONVERT OFFSET TO BINARY
         CH    OFFSL,=H'32767'    GREATER THAN MAX OFFSET VALUE.......?
         BH    PIDOFFME           YES, ERROR             ------------->
         TM    FLAGS,RECFMV       VARIABLE OUTREC FORMAT .............?
         BNO   PIDOFMXX           NO                     ------------->
         CH    OFFSL,=H'4'        OFFSET LENGTH > RDW    .............?
         BL    PIDOFFME           NO, OVERALY OF RDW     ------------->
*  SPECIFICATION OF OFFSET IS O.K.
PIDOFMXX STH   OFFSL,OFFSET       SAVE OFFSET VALUE
         OI    FLAGS1,OFFSP       OFFSET PRESENT FLAG
         B     PIDTF1             PROCESS NEXT SUBFIELD  ------------->
*  CONTINUATION OF OFFSET SPECIF. EXPECTED ON NEXT RECORD
PIDOFFMC LA    R14,PIDOFMC1       RETURN ADDRESS
         B     PIDCCONT           CONSTANT CONTINUATION ON NEXT IREC-->
*  TYPE SUBFIELD WAS THE LAST CHARACTER ON THIS INPUT RECORD
PIDTFC   LA    R14,PIDTF1         RETURN ADDRESS (NEXT SUBFIELD PROC.)
         B     PIDCCONT           CONSTANT CONTINUATION ON NEXT IREC-->
*  DUPLICATION FACTOR IS EXPECTED TO BE CONTINUED ON NEXT INPUT RECORD
PIDUPFC  LA    R14,PIDUPF0        RETURN ADDRESS (NEXT DUPF.CHAR PROC.)
         B     PIDCCONT           CONSTANT CONTINUATION ON NEXT IREC-->
         SPACE
*  ERROR IN OFFSET MODIFIER SPECIFICATION
PIDOFFME LA    R1,OFFSMERM        OFFSET MODIFIER ERROR MESSAGE ADDRESS
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*  DUPLICATION FACTOR LENGTH ERROR
PIDUPFLE LA    R1,DUPFLERM        DUPLICATION FACTOR LENGTH ERR.MSG.ADR
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*  INVALID CHARACTER FOUND
PID1INVC DS    0H
PID2INVC DS    0H
PID3INVC DS    0H
         BAL   R14,INVCPROC       CHECK IF CONSECUTIVE OCCURENCE
         LA    R1,INVCHARM        INVALID CHARACTER MESSAGE
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*  PROCESSING OF LENGTH MODIFIER
         SPACE
PIDLENM  TM    FLAGS1,LENMP       LENGTH MODIFIER ALREADY SPECIFIED..?
         BO    PIDLENME           YES,ERROR,DUPLICATE SPECIFICATION-->
         SR    LENML,LENML        LENGTH STRIN LENGTH = 0 INITIALLY
         L     LENMA,OUTRWAA      WORK AREA ADDRESS FOR LENGTH STRING
PIDLENM1 LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      LENGHT OF SCAN STRING
         BNP   PIDLENMC           CONTINUATION EXPECTED AT THIS POINT->
PIDLNMC1 EX    R0,TRTSCAN         ONLY ONE CHARACTER IS CHECKED
         STC   R2,FUNBYTE         FUNCTION BYTE
         CLI   FUNBYTE,NUMERIC    NUMERIC CHARACTER      .............?
         BNE   PIDLENMX           NO, END OF LENGTH MODIFIER---------->
         MVC   0(1,LENMA),0(SCANADR) MOVE LENGTH DIGIT INTO OUT FIELD
         LA    LENML,1(0,LENML)   LENGTH OF LENGTH STRING + 1
         LA    LENMA,1(0,LENMA)   ADDRESS OF NEXT OUT.LENM.CHAR.
         B     PIDLENM1           CHECK NEXT LENGTH CHAR ------------->
PIDLENMX LTR   LENML,LENML        LENGTH LENGTH > 0      .............?
         BNP   PIDLENME           NO, LENML = 0, ERROR   ------------->
         CH    LENML,=H'5'        LENGTH LENGTH MORE THAN 5 DIGITS....?
         BH    PIDLENME           YES, ERROR             ------------->
         MVI   VALSIGN,C'+'       POSITIVE VALUE
         BAL   R14,CONVB          CONVERT LENGTH TO BINARY
         C     LENML,=F'32768'    GREATER THAN MAX LENGTH VALUE.......?
         BH    PIDLENME           YES, ERROR             ------------->
         CH    LENML,=H'0'        = 0                    .............?
         BE    PIDLENME           YES, ERROR             ------------->
         CLI   TYPE,TYPEF         TYPE "F" CONSTANT      .............?
         BE    PIDLENME           YES, ERROR, LEN.MODIF.NOT ALLOWED--->
         CLI   TYPE,TYPEH         TYPE "H" CONSTANT      .............?
         BE    PIDLENME           YES, ERROR, LEN.MODIF.NOT ALLOWED--->
         CLI   TYPE,TYPEE         TYPE "E" CONSTANT      .............?
         BE    PIDLENME           YES, ERROR, LEN.MODIF.NOT ALLOWED--->
         CLI   TYPE,TYPED         TYPE "D" CONSTANT      .............?
         BE    PIDLENME           YES, ERROR, LEN.MODIF.NOT ALLOWED--->
         CLI   TYPE,TYPEL         TYPE "L" CONSTANT      .............?
         BE    PIDLENME           YES, ERROR, LEN.MODIF.NOT ALLOWED--->
         CLI   TYPE,TYPEA         TYPE "A" CONSTANT      .............?
         BNE   PIDLNMXP           NO, CHECK IF TYPE "P"  ------------->
         CH    LENML,=H'4'        YES,TYPE "A", IS <= 4  .............?
         BH    PIDLENME           NO, ERROR, TOO LONG    ------------->
PIDLNMXP CLI   TYPE,TYPEP         TYPE "P" CONSTANT      .............?
         BNE   PIDLNMXZ           NO, CHECK IF TYPE "Z"  ------------->
         CH    LENML,=H'8'        YES, TYPE "P", IS <= 8 .............?
         BH    PIDLENME           NO, TO LARGE VALUE, ERROR----------->
PIDLNMXZ CLI   TYPE,TYPEZ         TYPE "Z" CONSTANT      .............?
         BNE   PIDLNMXX           NO, EVERYTHING IS O.K. ------------->
         CH    LENML,=H'15'       YES, TYPE "Z", IS <= 15.............?
         BH    PIDLENME           NO, TO LARGE VALUE, ERROR----------->
*  SPECIFICATION OF LENGTH IS O.K.
PIDLNMXX ST    LENML,LENGTHM      SAVE LENGTH VALUE
         OI    FLAGS1,LENMP       LENGTH PRESENT FLAG
         B     PIDTF1             PROCESS NEXT SUBFIELD  ------------->
*  CONTINUATION OF LENGTH SPECIF. EXPECTED ON NEXT RECORD
PIDLENMC LA    R14,PIDLNMC1       RETURN ADDRESS
         B     PIDCCONT           CONSTANT CONTINUATION ON NEXT IREC-->
         SPACE
*  ERROR IN LENGTH MODIFIER SPECIFICATION
PIDLENME LA    R1,LENMERM         LENGTH MODIFIER ERROR MESSAGE ADDRESS
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*  MAY BE START OF COMMENT SPECIFICATION
         SPACE
PIDCOMMP DS    0H
         LA    SCANADR,1(0,SCANADR) NEXT CHAR ADDRESS
         SH    SCANLEN,=H'1'      SCAN STRING LENGTH - 1
         BNP   PIDCMLDC           COMMENT LEFT DELIMITER CONTINUATION
PIDCMLD0 CLI   0(SCANADR),C'*'    LEFT DELIMITER         .............?
         BNE   PID1INVC           NO, INVALID CHARACTERS ------------->
*   SEARCH FOR COMMENT RIGHT DELIMITER
PIDCMRD0 LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      SCAN STRING LENGTH - 1
         BNP   PIDCRDC1           RIGHT DELIM.IS CONTINUED ON NEXT REC.
PIDCMRD1 CLI   0(SCANADR),C'*'    POSSIBLY RIGHT DELIMITER............?
         BNE   PIDCMRD0           NO,CHECK NEXT CHARACTER ------------>
         LA    SCANADR,1(0,SCANADR) NEXT ( SLASH ? ) CHAR ADDRESS
         SH    SCANLEN,=H'1'      IS THERE ANY CHAR LEFT ON THIS IREC.?
         BNP   PIDCRDC2           NO, SLASH MAY BE ON NEXT INPUT REC-->
PIDCMRD2 CLI   0(SCANADR),C'/'    END OF RIGTH DELIMITER  ............?
         BNE   PIDCMRD1           NO, LOOK FOR ASTERISK   ------------>
*   END OF COMMENT RIGHT DELIMITER FOUND
*!!!!!!!!!!!MAKE PROVISION FOR ONE BLANK SEPARATOR????????????????????
*!!!!!!!!!!!     DOWN HERE                        ????????????????????
PIDNEXTC LA    SCANADR,1(0,SCANADR) NEXT CHAR ADDRESS
         SH    SCANLEN,=H'1'      IS THERE ANY CHAR LEFT ON THIS IREC.?
         BP    PIDCDT             YES, LOOK NEXT COMMENT OR CONSTANT
         B     PIDNMC             NO, END OF THIS INPUT RECORD
*  CONTINUATION OF COMMENT LEFT DELIMITER ON NEXT INPUT REC
PIDCMLDC LA    R14,PIDCMLD0       RETURN ADDRESS
         B     PIDCCONT           COMMENT CONTINUATION ON NEXT IREC--->
*  CONTINUATION OF COMMENT RIGHT DELIMITER ON NEXT INPUT RECORD
*  ( SEARCH FOR LEADING ASTERISK )
PIDCRDC1 LA    R14,PIDCMRD1       RETURN ADDRESS
         B     PIDCCONT           COMMENT CONTINUATION ON NEXT IREC--->
*  CONTINUATION OF COMMENT RIGHT DELIMITER ON NEXT INPUT RECORD
*  ( SEARCH FOR ENDING SLASH )
PIDCRDC2 LA    R14,PIDCMRD2       RETURN ADDRESS
         B     PIDCCONT           COMMENT CONTINUATION ON NEXT IREC--->
         SPACE
*---------------------------------------------------------------------*
*  PROCESSING OF A CONSTANT VALUE ( EXTRACT ETC )                     *
*---------------------------------------------------------------------*
         SPACE
PIDVLD   DS    0H                 VALUE LEFT DELIMITER IDENTIFIED
         NI    FLAGS2,X'FF'-INVCHAR AT THIS POINT PREVIOUS INVALID
*                                 CHARACTER MAY BE DISREGARDED
         TM    FLAGS1,OFFSP       OFFSET OF THIS CONSTANT SPECIF......?
         BNO   PIDVLD1            NO, OFFSET EQUAL TO ABC ------------>
         MVC   OUTOFFS,OFFSET     FIRST CONST.OFFSET SPECIF.EXPLICITLY
         B     PIDVTS0            CONTINUE                ------------>
PIDVLD1  STH   ABC,OUTOFFS        OUTPUT OFFSET = AVAILABLE BYTE COUNT
PIDVTS0  SR    R15,R15            ZERO R15
         IC    R15,TYPE           CONSTANT TYPE
         MVC   NVCNT,=H'1'        NOMINAL VALUE COUNT ( FIRST )
         B     PIDVTS-TYPEA(R15)  CONSTANT TYPE SELECTION
PIDVTS   B     PIDVTA             TYPE A CONSTANT
         B     PIDVTC             TYPE C CONSTANT
         B     PIDVTF             TYPE F CONSTANT
         B     PIDVTH             TYPE H CONSTANT
         B     PIDVTP             TYPE P CONSTANT
         B     PIDVTX             TYPE X CONSTANT
         B     PIDVTE             TYPE E CONSTANT
         B     PIDVTD             TYPE D CONSTANT
         B     PIDVTL             TYPE L CONSTANT
         B     PIDVTZ             TYPE Z CONSTANT
         SPACE
*---------------------------------------------------------------------*
*  "A" TYPE CONSTANT PROCESSING                                       *
*---------------------------------------------------------------------*
         SPACE
PIDVTA   DS    0H                 TYPE = A CONSTANT PROCESSING
         TM    FLAGS1,LENMP       LENGTH MODIFIER SPECIFIED...........?
         BO    PIDVTAE1           YES, DO NOT PROCESS DEFAULT--------->
         MVC   LENGTHM,=F'4'      DEFAULT LENGTH MODIFIER ............?
PIDVTAE1 MVC   OUTCSOFF,OUTOFFS   OFFSET OF FIRST NOMINAL VALUE
PIDVTAN  DS    0H                 TYPE = P CONSTANT NOMINAL VALUE PROC.
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
PIDVTA0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTAC1           NO, CHECK CONTINUATION  ------------>
PIDVTA1  EX    R0,TRTSCAN         FIND OUT WHAT CHARACTER
         SLL   R2,24              STRIP 3 H/O BYTES
         SRL   R2,24              TO GET FUNCTION BYTE VALUE
         B     PIDVTACS-INVCHC(R2) BR TO CHARACTER SELECTION BR TABLE
PIDVTACS B     FPVALPIC           INVALID CHARACTER       ------------>
         B     PIDVTA1O           DECIMAL DIGIT           ------------>
         B     PIDVTAX            RIGHT DELIMITER         ------------>
         B     PIDVTAK            COMMA                   ------------>
         SPACE
PIDVTA1O MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         B     PIDVTA0            CHECK NEXT CHARACTER    ------------>
PIDVTAK  DS    0H                 COMMA, MULTIPLE VALUES SPECIFIED
         BAL   R14,BINVALP        BINARY NOMINAL VALUE PROCESSING
         B     PIDVTAN            NEXT NOMINAL VALUE PROCESSING
* END OF BINARY UNSIGNED CONSTANT FOUND
PIDVTAX  BAL   R14,BINVALP        PROCESS LAST NOMINAL VALUE
         BAL   R14,DUPFPROC       PROCESS DUPLICATION FACTOR IF SPECIF
         B     PIDNEXTC           PROCESSING OF THE NEXT CONSTANT
*  CONTINUATION OF PACKED DECIMAL CONSTANT ON NEXT INPUT RECORD
PIDVTAC1 LA    R14,PIDVTA1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
* PROCESSING OF BINARY UNSIGNED CONSTANT NOMINAL VALUE ( TYPE A )
BINVALP  SUBENT
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   BINVALL0           NO, LENGTH = 0         ------------->
         CH    CVALL,=H'15'       IS CONSTANT'S LENGTH <= 15 DIGITS...?
         BH    BINVALL1           NO, MAX LENGTH EXCEEDED------------->
         MVI   VALSIGN,C'+'       ALWAYS POSITIVE VALUE
         BAL   R14,CONVB          CONVERT NOMINAL VALUE TO BINARY
         ST    CVALL,D            SAVE VALUE IN "D"
         L     R15,LENGTHM        LENGTH MODIFIER
         L     R1,=F'4'           DEFAULT LENGTHM
         CR    R1,R15             DEFAULT LENGTH          ............?
         BE    BINVPDL            YES, DO NOT CHECK VALUE ------------>
         SR    R1,R15             DEF.LENM-LENGTHM
         BCTR  R1,0               NO.OF FREE LEADING BYTES - 1
         EX    R1,CLCBINVL        IS BINARY VALUE WITHIN LIMITS.......?
         BNE   BINMVEX            MAXIMUM VALUE EXCEEDED-------------->
         L     R1,=F'4'           RELOAD DEFAULT
BINVPDL  LH    R0,OUTOFFS        OUTPUT OFFSET
         LR    R14,R0
         A     R14,OUTRA          LOCATION IN OUTREC
         AR    R0,R15             OFFSET + LENGTH OF CONSTANT
         CH    R0,LRECL           LRECL EXCEEDED          ............?
         BH    BINVLEXC           YES, LRECL EXCEEDED     ------------>
         STH   R0,OUTOFFS         NEW OUTPUT OFFSET
         CR    R0,ABC             IS GREATER THAN "ABC"   ............?
         BNH   BINVPM             NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R0             YES, CHANGE "ABC" TO HIGHER VALUE...?
BINVPM   SR    R1,R15             4 - LENGTHM
         LA    R1,D(R1)           ADDR.OF FIRST BYTE OF CONSTANT
         BCTR  R15,0              LENGTHM - 1
         EX    R15,MVCBINVL       MOVE BINARY VALUE INTO OUTPUT RECORD=
BINVALPR SUBRET BINVALP           RETURN
CLCBINVL CLC   D(1),=10X'00'      IS BINARY CONSTANT WITHIN LIMITS....?
MVCBINVL MVC   0(1,R14),0(R1)     MOVE TYPE A CONST.INTO OUTREC========
         SPACE
*  TYPE "A" CONSTANT NOMINAL VALUE LENGTH = 0 CHARACTERS
BINVALL0 DS    0H
         LA    R1,DECVLL0M        MESSAGE ADDRESS
BINVALER BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     BINVALPR           RETURN FROM NOMINAL VALUE PROCESSING
         SPACE
*   CONSTANT NOMINAL VALUE MEX. LENGTH EXCEEDED
BINVALL1 DS    0H
         LA    R1,DECVLLMM        MESSAGE ADDRESS
         B     BINVALER           PRINT ERROR MESSAGE
         SPACE
*   CONSTANT NOMINAL VALUE OUT OF ALLOWABLE RANGE
BINMVEX  DS    0H                 MAXIMUM VALUE EXCEEDED
         LA    R1,VALOORM         MESSAGE ADDRESS
         B     BINVALER           PRINT ERROR MESSAGE
         SPACE
*   LRECL EXCEEDED FOR TYPE "A" CONSTANT
BINVLEXC DS    0H
         TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    BINVALPR           YES, RETURN FROM FIX.VALUE PROC----->
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        MESSAGE ADDRESS
         B     BINVALPR           PRINT ERROR MESSAGE
         SPACE
*---------------------------------------------------------------------*
*  "F" TYPE CONSTANT PROCESSING                                       *
*---------------------------------------------------------------------*
         SPACE
PIDVTF   DS    0H                 TYPE = F CONSTANT PROCESSING
         MVC   FPNVL,=H'15'       MAX.NOMIMAL VALUE LENGTH
         MVC   FPMAXV,=X'7FFFFFFF' MAXIMUM VALUE
         MVC   FPMINV,=X'80000000' MINIMUM VALUE
PIDVTF1  EQU   *
         BAL   R14,FPVALP         FIXED POINT VALUE PROCESSING
         BAL   R14,DUPFPROC       PROCESS DUPLICATION FACTOR IF SPECIF
         B     PIDNEXTC           PROCESSING OF NEXT CONSTANT
         SPACE
*---------------------------------------------------------------------*
*  "H" TYPE CONSTANT PROCESSING                                       *
*---------------------------------------------------------------------*
         SPACE
PIDVTH   DS    0H                 TYPE = H CONSTANT PROCESSING
         MVC   FPNVL,=H'5'        MAX.NOMIMAL VALUE LENGTH
         MVC   FPMAXV,=X'00007FFF' MAXIMUM VALUE
         MVC   FPMINV,=X'FFFF8000' MINIMUM VALUE
         B     PIDVTF1            CONTINUE              -------------->
         SPACE
*---------------------------------------------------------------------*
*  CHARACTER TYPE CONSTANT PROCESSING                                 *
*---------------------------------------------------------------------*
         SPACE
PIDVTC   DS    0H                 TYPE = C CONSTANT PROCESSING
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
         TM    FLAGS1,LENMP       LENGTH MODIFIER SPECIFIED...........?
         BNO   PIDVTC0            NO, DO NOT INITIALYZE OURWA
* LENGTH MODIF. SPECIFIED - INITIALYZE WORK AREA WITH BLANKS
         L     R1,LENGTHM         LENGTH MODIFIER VALUE
         L     R0,OUTRWAA         WORK AREA ADDRESS
         IC    R15,=X'40'         PAD CHARACTER ( BLANK )
         SLL   R15,24             SHIFT IT INTO BIT POSITION 0-7
         MVCL  R0,R14             INITIALYZE WORK AREA WITH BLANKS
PIDVTC0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTCC1           NO, CHECK CONTINUATION  ------------>
PIDVTC1  CLC   0(1,SCANADR),TYPEVRD   RIGHT DELIMITER     ............?
         BE    PIDVTCR1           PROBABLY RIGHT DELIMITER------------>
PIDVTC1O MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         B     PIDVTC0            CHECK NEXT CHARACTER    ------------>
PIDVTCR1 LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTCC2           NO, CHECK CONTINUATION  ------------>
PIDVTC2  CLC   0(1,SCANADR),TYPEVRD   TWO CONSECUTIVE DELIMITERS......?
* TWO CONSECUTIVE RIGHT DELIMITERS GIVE ONE CHARACTER
         BE    PIDVTC1O           MOVE ONE DELIMITER TO OUTPUT
         BCTR  SCANADR,0          NO, PREVIOUS CHAR ADDRESS
         LA    SCANLEN,1(,SCANLEN) NO OF CHARS LEFT ON THE CARD
* END OF CHARACTER CONSTANT FOUND
PIDVTCX  DS    0H
         TM    FLAGS1,LENMP       LENGTH MODIFIER SPECIFIED...........?
         BNO   PIDVTCX0           NO, DEFAULT LENGTH       ----------->
         C     CVALL,LENGTHM      IS DEFAULT LENGTH <= LENGTH MODIF...?
         BH    CVALELE            NO, ERROR, TOO LONG CONST. SPECIF--->
         L     CVALL,LENGTHM      EXPLICIT LENGTH WILL BE TAKEN
PIDVTCX0 LA    R15,1              DEFAULT DUPLICATION FACTOR
         TM    FLAGS1,DUPFP       DUPLICATION FACTOR WAS SPECIFIED....?
         BNO   PIDVTCX1           NO, TAKE DEFAULT        ------------>
         L     R15,DUPF           YES, VALUE OF DUPLICATION FACTOR
PIDVTCX1 LH    R1,OUTOFFS         OUTPUT OFFSET
         LR    R0,R1
         AR    R1,CVALL           OFFSET + CHAR.STRING LENGTH = RECL
         CH    R1,LRECL           LRECL EXCEEDED          ............?
         BH    LRECLEXC           YES, LRECL EXCEEDED     ------------>
         STH   R1,OUTOFFS         NEW OUTPUT OFFSET
         CR    R1,ABC             IS GREATER THAN "ABC"   ............?
         BNH   PIDVTCX2           NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R1             YES, CHANGE "ABC" TO HIGHER VALUE...?
PIDVTCX2 A     R0,OUTRA           OUTOFFS + OUT.REC.ADDR = OUT MVCL ADR
         LR    R1,CVALL           MOVED CHAR STRING LENGTH
         L     R2,OUTRWAA         MOVED ( INPUT ) STRING ADDRESS
         LR    R3,CVALL           MOVED STRING LENGTH
         MVCL  R0,R2              MOVE CHAR.CONST.VALUE INTO OUT.REC.
         BCT   R15,PIDVTCX1       REPEAT MOVEMENT DUPF TIMES---------->
         B     PIDNEXTC           PROCESSING OF NEXT CONSTANT
*  CONTINUATION OF CHARACTER CONSTANT ON NEXT INPUT RECORD
PIDVTCC1 LA    R14,PIDVTC1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
*  CONTINUATION OF CHARACTER CONSTANT (RIGHT DELIM.FOUND IN COL 71)
PIDVTCC2 CLI   0(SCANADR),X'40'   IS RECORD TO BE CONTINUED...........?
         BNE   PIDVTCC3           YES, READ NEXT INPUT RECORD--------->
         BCTR  SCANADR,0          NO, PREVIOUS CHAR ADDRESS
         LA    SCANLEN,1(,SCANLEN) NO.OF CHARS LEFT ON THE CARD
         B     PIDVTCX            END OF CONSTANT PROCESSING---------->
PIDVTCC3 LA    R14,PIDVTC2        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
*  LRECL EXCEEDED BY LAST PROCESSED CONSTANT
LRECLEXC TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    PIDNEXTC           YES, PROCESS NEXT CONSTANT---------->
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        LRECL EXCEEDED MESSAGE TEXT ADDRESS
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*  CHARACTER CONSTANT EXPLICIT LENGTH > LENGTH MODIFIER
CVALELE  DS    0H
         LA    R1,VALELEM         MESSAGE ADDRESS
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         L     CVALL,LENGTHM      VALUE WILL BE TRUNCATED TO EXPLICIT
         B     PIDVTCX0           LENGTH                 ------------->
         SPACE
*---------------------------------------------------------------------*
*  PACKED DECIMAL CONSTANT PROCESSING                                 *
*---------------------------------------------------------------------*
         SPACE
PIDVTP   DS    0H                 TYPE = P CONSTANT PROCESSING
         MVC   OUTCSOFF,OUTOFFS   OFFSET OF FIRST NOMINAL VALUE
PIDVTPN  DS    0H                 TYPE = P CONSTANT NOMINAL VALUE PROC.
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
PIDVTP0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTPC1           NO, CHECK CONTINUATION  ------------>
PIDVTP1  EX    R0,TRTSCAN         FIND OUT WHAT CHARACTER
         SLL   R2,24              STRIP 3 H/O BYTES
         SRL   R2,24              TO GET FUNCTION BYTE VALUE
         B     PIDVTPCS-INVCHC(R2) BR TO CHARACTER SELECTION BR TABLE
PIDVTPCS B     PIDVTPIC           INVALID CHARACTER       ------------>
         B     PIDVTP1O           DECIMAL DIGIT           ------------>
         B     PIDVTPS            DECIMAL SIGN            ------------>
         B     PIDVTPP            DECIMAL POINT           ------------>
         B     PIDVTPK            COMMA                   ------------>
         B     PIDVTPX            RIGHT DELIMITER         ------------>
         SPACE
PIDVTP1O MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTP0            CHECK NEXT CHARACTER    ------------>
PIDVTPS  MVC   VALSIGN,0(SCANADR) SIGN OF THE VALUE
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTP0            CHECK NEXT CHARACTER    ------------>
PIDVTPP  MVI   TRT+C'.',INVCHC    DECIMAL POINT IS NO LONGER VALID CHAR
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTP0            CHECK NEXT CHARACTER    ------------>
PIDVTPK  DS    0H                 COMMA, MULTIPLE VALUES SPECIFIED
         BAL   R14,DECVALP        DECIMAL NOMINAL VALUE PROCESSING
         B     PIDVTPN            NEXT NOMINAL VALUE PROCESSING
* END OF PACKED DECIMAL CONSTANT FOUND
PIDVTPX  BAL   R14,DECVALP        PROCESS LAST NOMINAL VALUE
         BAL   R14,DUPFPROC       PROCESS DUPLICATION FACTOR IF SPECIF
         B     PIDNEXTC           PROCESSING OF THE NEXT CONSTANT
*  CONTINUATION OF PACKED DECIMAL CONSTANT ON NEXT INPUT RECORD
PIDVTPC1 LA    R14,PIDVTP1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
*  INVALID CHARACTER IN PACKED DECIMAL CONSTANT VALUE
PIDVTPIC DS    0H
         BAL   R14,INVCPROC       CHECK IF CONSECUTIVE OCCURENCE
         LA    R1,INVCHARM        INVALID CHARACTER MESSAGE
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
* PACKED DECIMAL CONSTANT NOMINAL VALUE PROCESSING
         SPACE
DECVALP  SUBENT
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   DECVALL0           NO, LENGTH = 0         ------------->
         CH    CVALL,=H'15'       IS CONSTANT'S LENGTH <= 15 DIGITS...?
         BH    DECVALL1           NO, MAX LENGTH EXCEEDED------------->
         BAL   R14,CONVDEC        CONVERT NOMINAL VALUE TO DECIMAL
*                                 CVALL CONTAINS LENGTH OF SIGNIFICANT
*                                 BYTES IN WORK FIELD "D"
         TM    FLAGS1,LENMP       LENGTH MODIFIER SPECIFIED...........?
         BNO   DECVALDL           NO, DEFAULT LENGTH       ----------->
         C     CVALL,LENGTHM      IS DEFAULT LENGTH <= LENGTH MODIF...?
         BH    DECVALL2           NO, ERROR, TOO LARGE VALUE SPECIF--->
         L     CVALL,LENGTHM      EXPLICIT LENGTH WILL BE TAKEN
DECVALDL EQU   *
         LH    R1,OUTOFFS         OUTPUT OFFSET
         LR    R14,R1
         AR    R1,CVALL           OFFSET + CHAR.STRING LENGTH = RECL
         CH    R1,LRECL           LRECL EXCEEDED          ............?
         BH    DECVLEXC           YES, LRECL EXCEEDED     ------------>
         STH   R1,OUTOFFS         NEW OUTPUT OFFSET
         CR    R1,ABC             IS GREATER THAN "ABC"   ............?
         BNH   DECVAL1            NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R1             YES, CHANGE "ABC" TO HIGHER VALUE...?
DECVAL1  A     R14,OUTRA          OUTOFFS + OUT.REC.ADDR = OUT MVC ADR
         LA    R2,8               LENGTH OF "D" FIELD
         SR    R2,CVALL           NO.OF LEEDING BYTES FROM "D" TO BE
*                                 IGNORED
         LA    R2,D(R2)           ADDRESS OF FIRST BYTE FROM "D" TO BE
*                                 MOVED
         BCTR  CVALL,0            NO.OF MOVED BYTES - 1
         EX    CVALL,MVCDECV      MOVE PACKED DECIMAL VALUE INTO OUTREC
DECVALR  SUBRET DECVALP           RETURN TO CALLER
MVCDECV  MVC   0(1,R14),0(R2)     MOVE PACKED DEC.VALUE TO OUTPUT REC
         SPACE
*  TYPE "P" CONSTANT NOMINAL VALUE LENGTH = 0 CHARACTERS
DECVALL0 DS    0H
         LA    R1,DECVLL0M        MESSAGE ADDRESS
DECVALER BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     DECVALR            RETURN FROM DECIMAL VALUE PROC.
         SPACE
*  TYPE "P" CONSTANT NOMINAL VALUE LENGTH > 15 CHARACTERS
DECVALL1 DS    0H
         LA    R1,DECVLLMM        MESSAGE ADDRESS
         B     DECVALER           PRINT ERROR MESSAGE
         SPACE
*  TYPE "P" CONSTANT NOMINAL VALUE IMPLICIT LENGTH > LENGTH MODIFIER
DECVALL2 DS    0H
         LA    R1,VALELEM         MESSAGE ADDRESS
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         L     CVALL,LENGTHM      VALUE WILL BE TRUNCATED TO EXPLICIT
         B     DECVALDL           LENGTH                 ------------->
         SPACE
*  TYPE "P" CONSTANT - LRECL EXCEEDED
DECVLEXC DS    0H
         TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    DECVALR            YES, RETURN FROM DEC.VALUE PROC----->
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        MESSAGE ADDRESS
         B     DECVALER           PRINT ERROR MESSAGE
         SPACE
*---------------------------------------------------------------------*
*  ZONED  DECIMAL CONSTANT PROCESSING                                 *
*---------------------------------------------------------------------*
         SPACE
PIDVTZ   DS    0H                 TYPE = Z CONSTANT PROCESSING
         MVC   OUTCSOFF,OUTOFFS   OFFSET OF FIRST NOMINAL VALUE
PIDVTZN  DS    0H                 TYPE = Z CONSTANT NOMINAL VALUE PROC.
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
PIDVTZ0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTZC1           NO, CHECK CONTINUATION  ------------>
PIDVTZ1  EX    R0,TRTSCAN         FIND OUT WHAT CHARACTER
         SLL   R2,24              STRIP 3 H/O BYTES
         SRL   R2,24              TO GET FUNCTION BYTE VALUE
         B     PIDVTZCS-INVCHC(R2) BR TO CHARACTER SELECTION BR TABLE
PIDVTZCS B     PIDVTZIC           INVALID CHARACTER       ------------>
         B     PIDVTZ1O           DECIMAL DIGIT           ------------>
         B     PIDVTZS            DECIMAL SIGN            ------------>
         B     PIDVTZP            DECIMAL POINT           ------------>
         B     PIDVTZK            COMMA                   ------------>
         B     PIDVTZX            RIGHT DELIMITER         ------------>
         SPACE
PIDVTZ1O MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTZ0            CHECK NEXT CHARACTER    ------------>
PIDVTZS  MVC   VALSIGN,0(SCANADR) SIGN OF THE VALUE
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTZ0            CHECK NEXT CHARACTER    ------------>
PIDVTZP  MVI   TRT+C'.',INVCHC    DECIMAL POINT IS NO LONGER VALID CHAR
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTZ0            CHECK NEXT CHARACTER    ------------>
PIDVTZK  DS    0H                 COMMA, MULTIPLE VALUES SPECIFIED
         BAL   R14,ZONVALP        ZONED   NOMINAL VALUE PROCESSING
         B     PIDVTZN            NEXT NOMINAL VALUE PROCESSING
* END OF ZONED  DECIMAL CONSTANT FOUND
PIDVTZX  BAL   R14,ZONVALP        PROCESS LAST NOMINAL VALUE
         BAL   R14,DUPFPROC       PROCESS DUPLICATION FACTOR IF SPECIF
         B     PIDNEXTC           PROCESSING OF THE NEXT CONSTANT
*  CONTINUATION OF ZONED DECIMAL CONSTANT ON NEXT INPUT RECORD
PIDVTZC1 LA    R14,PIDVTZ1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
*  INVALID CHARACTER IN ZONED  DECIMAL CONSTANT VALUE
PIDVTZIC DS    0H
         BAL   R14,INVCPROC       CHECK IF CONSECUTIVE OCCURENCE
         LA    R1,INVCHARM        INVALID CHARACTER MESSAGE
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
* ZONED  DECIMAL CONSTANT NOMINAL VALUE PROCESSING
         SPACE
ZONVALP  SUBENT
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   ZONVALL0           NO, LENGTH = 0         ------------->
         CH    CVALL,=H'15'       IS CONSTANT'S LENGTH <= 15 DIGITS...?
         BH    ZONVALL1           NO, MAX LENGTH EXCEEDED------------->
         STH   CVALL,EDSGD        SAVE NUMBER OF SPECIFIED DIGITS
         BAL   R14,CONVDEC        CONVERT NOMINAL VALUE TO DECIMAL
         LH    CVALL,EDSGD        RESTORE NUMBER OF SPECIFIED DIGITS
         UNPK  ZONED,D            UNPACK VALUE TO ZONED FORMAT
         TM    FLAGS1,LENMP       LENGTH MODIFIER SPECIFIED...........?
         BNO   ZONVALDL           NO, DEFAULT LENGTH       ----------->
         L     CVALL,LENGTHM      YES, EXPLICIT LENGTH WILL BE TAKEN
ZONVALDL EQU   *
         LH    R1,OUTOFFS         OUTPUT OFFSET
         LR    R14,R1
         AR    R1,CVALL           OFFSET + CHAR.STRING LENGTH = RECL
         CH    R1,LRECL           LRECL EXCEEDED          ............?
         BH    ZONVLEXC           YES, LRECL EXCEEDED     ------------>
         STH   R1,OUTOFFS         NEW OUTPUT OFFSET
         CR    R1,ABC             IS GREATER THAN "ABC"   ............?
         BNH   ZONVAL1            NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R1             YES, CHANGE "ABC" TO HIGHER VALUE...?
ZONVAL1  A     R14,OUTRA          OUTOFFS + OUT.REC.ADDR = OUT MVC ADR
         LA    R2,15              LENGTH OF "ZONED" FIELD
         SR    R2,CVALL           NO.OF LEEDING BYTES FROM "ZONED"
*                                 TO BE IGNORED
         BZ    ZONVAL2            THERE IS NO TRUNCATION ( R2=0 )
         BCTR  R2,0               NO OF IGNORED BYTES - 1
         EX    R2,CLCZONT         ARE NON ZERO DIGITS TRUNCATED.......?
         BNE   ZONVALL2           YES, PRINT WARNING MESSAGE---------->
ZONVAL11 LA    R2,1(0,R2)         NO, RESTORE VALUE OF R2
ZONVAL2  LA    R2,ZONED(R2)       ADDRESS OF FIRST BYTE FROM "ZONED"
*                                 TO BE MOVED
         BCTR  CVALL,0            NO.OF MOVED BYTES - 1
         EX    CVALL,MVCZONV      MOVE ZONED  DECIMAL VALUE INTO OUTREC
ZONVALR  DS     0H
         SUBRET ZONVALP           RETURN TO CALLER
MVCZONV  MVC   0(1,R14),0(R2)     MOVE ZONED  DEC.VALUE TO OUTPUT REC
CLCZONT  CLC   ZONED(1),=C'00000000000000' CHECK IF TRUNCATION TOOK
*                                          PLACE
         SPACE
*  TYPE "Z" CONSTANT NOMINAL VALUE LENGTH = 0 CHARACTERS
ZONVALL0 DS    0H
         LA    R1,DECVLL0M        MESSAGE ADDRESS
ZONVALER BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     ZONVALR            RETURN FROM ZONED VALUE PROC.
         SPACE
*  TYPE "Z" CONSTANT NOMINAL VALUE LENGTH > 15 CHARACTERS
ZONVALL1 DS    0H
         LA    R1,DECVLLMM        MESSAGE ADDRESS
         B     ZONVALER           PRINT ERROR MESSAGE
         SPACE
*  TYPE "Z" CONSTANT NOMINAL VALUE IMPLICIT LENGTH > LENGTH MODIFIER
ZONVALL2 DS    0H
         ST    R2,EDE             SAVE VALUE OF R2
         ST    R14,EDD            SAVE R14
         LA    R1,VALELEM         MESSAGE ADDRESS
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         L     R2,EDE             RESTORE VALUE OF R2
         L     R14,EDD            RESTORE R14
         B     ZONVAL11           CONTINUE               ------------->
         SPACE
*  TYPE "Z" CONSTANT - LRECL EXCEEDED
ZONVLEXC DS    0H
         TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    ZONVALR            YES, RETURN FROM DEC.VALUE PROC----->
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        MESSAGE ADDRESS
         B     ZONVALER           PRINT ERROR MESSAGE
         SPACE
*---------------------------------------------------------------------*
*  FIXED POINT ( BINARY ) VALUE PROCESSING ( TYPE "F" AND "H" )       *
*---------------------------------------------------------------------*
         SPACE
FPVALP   SUBENT
         TM    FLAGS1,OFFSP       ALIGNMENT HAS TO BE PERFORMED.......?
         BO    FPVALPN0           NO, OUTOFFS WILL NOT BE CHANGED----->
         TM    PARMFLGS,ALIGN     ALIGNMENT HAS TO BE PERFORMED.......?
         BNO   FPVALPN0           NO, OUTOFFS WILL NOT BE CHANGED----->
         TM    OUTOFFS+1,BIT6+BIT7 IS ALREADY ON FULLWORD BOUNDARY....?
         BZ    FPVALPN0           YES, ALREADY ALIGNED    ------------>
         LH    R1,OUTOFFS         OUTPUT OFFSET
         CLI   TYPE,TYPEF         TYPE "F" CONSTANT       ............?
         BNE   FPVPH              NO, TYPE "H"            ------------>
* TYPE "F" CONSTANT
         TM    OUTOFFS+1,BIT6+BIT7 ALL LAST TWO BITS ON   ............?
         BO    FPVALGN1           YES, ADD 1 TO OUTOFFS   ------------>
         TM    OUTOFFS+1,BIT6     BIT6 ON                 ............?
         BO    FPVALGN2           YES, ADD 2 TO OUTOFFS   ------------>
         LA    R1,3(0,R1)         NO, ADD 3
         B     FPVALGNX           EXIT FROM ALIGNMENT     ------------>
FPVALGN2 LA    R1,2(0,R1)         ADD 2 TO OUTOFFS
         B     FPVALGNX           EXIT FROM ALIGNMENT     ------------>
         SPACE
*---------------------------------------------------------------------*
* TYPE "H" CONSTANT                                                   *
*---------------------------------------------------------------------*
         SPACE
FPVPH    TM    OUTOFFS+1,BIT7     REQUIRES ALIGNMENT      ............?
         BZ    FPVALPN0           NO                      ------------>
FPVALGN1 LA    R1,1(0,R1)         YES, ADD 1 TO OUTOFFS
FPVALGNX STH   R1,OUTOFFS         SAVE NEW OUTPUT OFFSET
FPVALPN0 MVC   OUTCSOFF,OUTOFFS   OFFSET OF FIRST NOMINAL VALUE
FPVALPN  DS    0H                 TYPE = P CONSTANT NOMINAL VALUE PROC.
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
FPVALP0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   FPVALPC1           NO, CHECK CONTINUATION  ------------>
FPVALP1  EX    R0,TRTSCAN         FIND OUT WHAT CHARACTER
         SLL   R2,24              STRIP 3 H/O BYTES
         SRL   R2,24              TO GET FUNCTION BYTE VALUE
         B     FPVALPCS-INVCHC(R2) BR TO CHARACTER SELECTION BR TABLE
FPVALPCS B     FPVALPIC           INVALID CHARACTER       ------------>
         B     FPVALP1O           DECIMAL DIGIT           ------------>
         B     FPVALPS            DECIMAL SIGN            ------------>
         B     FPVALPP            DECIMAL POINT           ------------>
         B     FPVALPK            COMMA                   ------------>
         B     FPVALPX            RIGHT DELIMITER         ------------>
         SPACE
FPVALP1O MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     FPVALP0            CHECK NEXT CHARACTER    ------------>
FPVALPS  MVC   VALSIGN,0(SCANADR) SIGN OF THE VALUE
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     FPVALP0            CHECK NEXT CHARACTER    ------------>
FPVALPP  MVI   TRT+C'.',INVCHC    DECIMAL POINT IS NO LONGER VALID CHAR
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     FPVALP0            CHECK NEXT CHARACTER    ------------>
FPVALPK  DS    0H                 COMMA, MULTIPLE VALUES SPECIFIED
         BAL   R14,FPNVP          NOMINAL VALUE PROCESSING
         B     FPVALPN            NEXT NOMINAL VALUE PROCESSING
* END OF FIXED POINT CONSTANT FOUND
FPVALPX  BAL   R14,FPNVP          PROCESS LAST NOMINAL VALUE
         B     FPVALPR            RETURN
*  CONTINUATION OF FIXED POINT CONSTANT ON NEXT INPUT RECORD
FPVALPC1 LA    R14,FPVALP1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
*  INVALID CHARACTER IN FIXED POINT CONSTANT VALUE
FPVALPIC DS    0H
         BAL   R14,INVCPROC       CHECK IF CONSECUTIVE OCCURENCE
         LA    R1,INVCHARM        INVALID CHARACTER MESSAGE
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*  TYPE "F" OR "H" CONSTANT NOMINAL VALUE LENGTH = 0 CHARACTERS
FPVALL0  DS    0H
         LA    R1,DECVLL0M        MESSAGE ADDRESS
FPVALER  BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     FPVALPR            RETURN FROM FIX.POINT VALUE PROC.
         SPACE
*   CONSTANT NOMINAL VALUE MEX. LENGTH EXCEEDED
FPVALL1  DS    0H
         LA    R1,DECVLLMM        MESSAGE ADDRESS
         B     FPVALER            PRINT ERROR MESSAGE
         SPACE
*   CONSTANT NOMINAL VALUE OUT OF ALLOWABLE RANGE
FPMAXVEX DS    0H
FPMINVEX DS    0H
         LA    R1,VALOORM         MESSAGE ADDRESS
         B     FPVALER            PRINT ERROR MESSAGE
         SPACE
*   LRECL EXCEEDED FOR TYPE "F" OR "H" CONSTANT
FPVLEXC  DS    0H
         TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    FPVALPR            YES, RETURN FROM FIX.VALUE PROC----->
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        MESSAGE ADDRESS
         B     FPVALER            PRINT ERROR MESSAGE
         SPACE
*---------------------------------------------------------------------*
*  FLOATING POINT CONSTANTS (TYPE=E OR D) PROCESSING                  *
*---------------------------------------------------------------------*
         SPACE
PIDVTE   DS    0H                 TYPE = E CONSTANT PROCESSING
PIDVTD   DS    0H                 TYPE = D CONSTANT PROCESSING
PIDVTL   DS    0H                 TYPE = L CONSTANT PROCESSING
         BAL   R14,EDALIGN        ALIGNMENT PROCESSING
         MVC   OUTCSOFF,OUTOFFS   OFFSET OF FIRST NOMINAL VALUE
PIDVTDN  DS    0H                 TYPE = D CONSTANT NOMINAL VALUE PROC.
         XC    EDD(EDCEND-EDD),EDD INITIALYSE CONSTANTS
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
PIDVTD0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTDC1           NO, CHECK CONTINUATION  ------------>
PIDVTD1  EX    R0,TRTSCAN         FIND OUT WHAT CHARACTER
         SLL   R2,24              STRIP 3 H/O BYTES
         SRL   R2,24              TO GET FUNCTION BYTE VALUE
         B     PIDVTDCS-INVCHC(R2) BR TO CHARACTER SELECTION BR TABLE
PIDVTDCS B     PIDVTDIC           INVALID CHARACTER       ------------>
         B     PIDVTDD            DECIMAL DIGIT           ------------>
         B     PIDVTDS            DECIMAL SIGN            ------------>
         B     PIDVTDP            DECIMAL POINT           ------------>
         B     PIDVTDK            COMMA                   ------------>
         B     PIDVTDX            RIGHT DELIMITER         ------------>
         B     PIDVTDE            EXPONENT                ------------>
         SPACE
PIDVTDD  DS    0H                 DECIMAL DIGIT
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         TM    EDFLAGS,EDEF       EXPONENT PROCESSING.................?
         BO    PIDVTDED           YES, DIGIT OF THE EXPONENT---------->
         TM    EDFLAGS,EDSDF      SIGNIFICANT DIGIT ALREADY FOUND.....?
         BO    PIDVTDDO           YES, MOVE DIGIT TO OUTPUT----------->
         CLI   0(SCANADR),C'0'    IS IT ZERO DIGIT....................?
         BNE   PIDVTDDO           NO, THIS IS FIRST SIGNFICANT DIGIT-->
         TM    EDFLAGS,EDDPF      DECIMAL POINT ALREADY FOUND.........?
         BNO   PIDVTD0            NO, IGNORE THIS ZERO---------------->
         LH    R0,ED10            YES, LOAD POWER OF 10
         SH    R0,=H'1'           SUBTRACT 1 FROM IT
         STH   R0,ED10            STORE POWER OF 10
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
PIDVTDDO MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         OI    EDFLAGS,EDSDF      SIGNIFICANT DIGIT ALREADY FOUND
         TM    EDFLAGS,EDDPF      DECIMAL POINT ALREADY FOUND.........?
         BNO   PIDVTDD2           NO, ADD ONE TO POWER OF 10---------->
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
PIDVTDD2 LH    R0,ED10            LOAD POWER OF 10
         AH    R0,=H'1'           ADD 1 TO IT
         STH   R0,ED10            STORE IT
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
         SPACE
PIDVTDS  MVC   VALSIGN,0(SCANADR) SIGN OF THE VALUE
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
         SPACE
PIDVTDP  OI    EDFLAGS,EDDPF      DECIMAL POINT FOUND
         MVI   TRT+C'.',INVCHC    DECIMAL POINT IS NO LONGER VALID CHAR
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
         SPACE
PIDVTDE  OI    EDFLAGS,EDEF       EXPONENT FOUND
         BAL   R14,EDCONV         CONVERT CHAR STRING TO FP NUMBER
         BAL   R14,CNVINITN       INIT AS FOR NUMERICS
         SR    CVALL,CVALL        CONSTANT VALUE LENGTH = 0
         L     CVALA,OUTRWAA      OUTPUT ADDRESS VALUE
         MVI   TRT+C'.',INVCHC    DECIMAL POINT IS NOT A VALID CHAR
         MVI   TRT+C'E',INVCHC    EXPONENT IS NOT LONGER VALID
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
         SPACE
PIDVTDED DS    0H                 DECIMAL DIGIT OF EXPONENT
         MVI   TRT+C'+',INVCHC    DECIMAL SIGN IS NO LONGER
         MVI   TRT+C'-',INVCHC    A VALID CHARACTER
         MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         B     PIDVTD0            CHECK NEXT CHARACTER    ------------>
         SPACE
PIDVTDK  DS    0H                 COMMA, MULTIPLE VALUES SPECIFIED
         BAL   R14,EDVALP         FLOATING POINT NOMINAL VALUE PROC.
         B     PIDVTDN            NEXT NOMINAL VALUE PROCESSING
         SPACE
* END OF FLOATING POINT CONSTANT FOUND
PIDVTDX  BAL   R14,EDVALP         PROCESS LAST NOMINAL VALUE
         BAL   R14,DUPFPROC       PROCESS DUPLICATION FACTOR IF SPECIF
         B     PIDNEXTC           PROCESSING OF THE NEXT CONSTANT
         SPACE
*  CONTINUATION OF FLOATING POINT CONSTANT ON NEXT INPUT RECORD
PIDVTDC1 LA    R14,PIDVTD1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
*  INVALID CHARACTER IN FLOATING POINT CONSTANT VALUE
PIDVTDIC DS    0H
         BAL   R14,INVCPROC       CHECK IF CONSECUTIVE OCCURENCE
         LA    R1,INVCHARM        INVALID CHARACTER MESSAGE
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
*---------------------------------------------------------------------*
*  CONVERTS CHAR. STRING INTO FLOATING POINT NUMBER                   *
*  TO INCREASE PRECITION OF RESULT - FP OPERATIONS ARE PERFORMED ON   *
*  EXTENDED OPERANDS AND THEN RESULT IS ROUNDED                       *
*---------------------------------------------------------------------*
         SPACE
EDCONV   SUBENT
         OI    EDFLAGS,EDFPC      THIS ROUTINE WAS CALLED FLAG
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   EDCONVL0           NO, LENGTH = 0         ------------->
         CH    CVALL,=H'15'       IS CONSTANT'S LENGTH <= 15 DIGITS...?
         BH    EDCONVL1           NO, MAX LENGTH EXCEEDED------------->
         MVC   EDSIGN,VALSIGN     SAVE FP NUMBER SIGN
         MVI   VALSIGN,C'+'       FORCE CONVERSION OF POSITIVE NUMBER
         STH   CVALL,EDSGD        SAVE NUMBER OF SIGNIFICANT DIGITS
         BAL   R14,CONVDEC        CONVERT IT TO DECIMAL
         SDR   R0,R0              ZERO IN FP REGISTER 0
         SDR   R2,R2              ZERO IN FP REGISTER 2
         LD    R4,MAXBINFP        MAX.BINARY NUMBER IN FP REG. 4
         SDR   R6,R6              ZERO IN FP REGISTER 6
EDCONVC  CP    D,MAXBIN           GREATER THAN MAX.BINARY NUMBER......?
         BH    EDCONVME           YES, DO STEP BY STEP CONV----------->
         XC    EDD,EDD            CLEAR EDD
         XC    EDDL,EDDL          CLEAR EDDL
         XR    R0,R0              CLEAR REGISTER 0
         LA    R2,64+8            CHARACTERISTIC + MAX.NO.OF HEX.DIGITS
         CVB   R1,D               CONVERT TO BINARY
EDCONVC1 SLDL  R0,4               SHIF ONE HEX.DIGIT TO THE LEFT
         LTR   R0,R0              H/O DIGIT SHIFTED FROM R1 TO R0.....?
         BNZ   EDCONVC2           YES, FIRST DIGIT LOCATED------------>
         BCTR  R2,0               NO, SUBTRACT ONE FROM CHARACTERISTIC
         B     EDCONVC1           SEARCH FOR FIRST HEX.DIGIT---------->
EDCONVC2 SRDL  R0,4               SHIFT BACK FIRST HEX.DIGIT TO R1
         ST    R1,EDD+1           STORE HEX DIGITS IN EDD
         STC   R2,EDD             STORE CHARACTERISTIC IN EDD
         CLI   EDSIGN,C'-'        NEGATIVE NUMBER.....................?
         BNE   EDCONVC3           NO, POSITIVE------------------------>
         OI    EDD,X'80'          YES, INSERT NEGATIVE SIGN
EDCONVC3 SDR   R6,R6              CLEAR R6
         LD    R4,EDD             LOAD EDD INTO R4
         AXR   R0,R4              ADD VALUE FROM R0
         STD   R0,EDD             PUT IT BACK INTO EDD  (H/O PART)
         STD   R2,EDDL            PUT IT BACK INTO EDDL (L/O PART)
EDCONVEX DS    0H                 RETURN TO CALLER
         SUBRET EDCONV            RETURN TO CALLER
         SPACE
EDCONVME AXR   R0,R4              NUMBER IS > THAN MAX.4 BYTES BINARY
         SP    D,MAXBIN           SUBTRACT 2147483647 FROM D
         B     EDCONVC            PROCEED WITH CONVERSION------------->
         SPACE
EDCONVL0 XC    EDD,EDD            THIS NUMBER IS 0 ( TRUE ZERO )
         OI    EDFLAGS,EDFP0      SET 0 NUMBER FLAG(TO SKIP PROCESSING
*                                 OF EXPONENT)
         B     EDCONVEX           RETURN FROM SUBROUTINE
         SPACE
EDCONVL1 DS    0H                 LENGTH OF CHAR.STRING > 15 DEC.DIGITS
         LA    R1,DECVLLMM        NUMBER OF SIGNIFICANT DEC.DIG.>15
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     EDCONVL0           THIS NUBER WILL BE SUBSTITUTED BY 0
         SPACE
* PROCESSING OF A FLOATING POINT NOMINAL VALUE
EDVALP   SUBENT
         TM    EDFLAGS,EDFPC      NUMBER ALREADY CONVERTED............?
         BO    EDVALP1            YES, PROCESS EXPONENT--------------->
         BAL   R14,EDCONV         CONVERT CHAR.STRING TO FP NUMBER
         B     EDVALP2            BYPASS EXPONENT PROCESSING---------->
EDVALP1  BAL   R14,EDEXPP         YES, PROCESS EXPONENT
EDVALP2  TM    EDFLAGS,EDFP0      IS THIS A ZERO .....................?
         BO    EDVALPN            YES, PROCESS NOMINAL VALUE---------->
*        CHECK IF SPECIFIED NUMBER IS WITHIN ALLOWABLE MAGNITUDE
         LH    R1,EDEXP           VALUE OF EXPONENT
         AH    R1,ED10            + POWER OF 10
         SH    R1,EDSGD           - NUMBER OF SIGNIFICANT DIGITS
         CH    R1,=H'-80'         LOWER RANGE
         BL    EDVALPME           LOWER RANGE OF MAGNITUDE EXCEEDED--->
         CH    R1,=H'+76'         UPPER RANGE
         BH    EDVALPME           UPPER RANGE OF MAGNITUDE EXCEEDED--->
*        MULTIPLY/DIVIDE THE NUMBER BY POWER OF 10
         LD    R0,EDD             LOAD THE NUMBER (H/O PART)
         LD    R2,EDDL            LOAD THE NUMBER (L/O PART)
         SDR   R6,R6              CLEAR FP REG. 6
         LTR   R1,R1              IS VALUE OF POWER OF 10 EQUAL 0.....?
         BZ    EDVALP1E           YES, PROCESS NOMINAL VALUE---------->
         BM    EDVALP3            LESS THAN 0, DIVIDE BY 10----------->
         LD    R4,=D'10'          GREATER THAN 0, MULTIPLY BY 10
         B     EDVALP10           GO TO MULTIPLY LOOP----------------->
EDVALP3  LD    R4,ONETENTH        LESS THAN 0, DIVIDE BY 10
         LD    R6,ONETENTH+8      L/O PART OF ONE TENTH IN EXT.FORMAT
EDVALP10 LTR   R1,R1              IS VALUE OF POWER OF 10 EQUAL 0.....?
         BZ    EDVALP1E           YES, PROCESS NOMINAL VALUE---------->
         BM    EDVALP1D           LESS THAN 0, DIVIDE----------------->
         MXR   R0,R4              GERATER THAN 0, MULTIPLY BY 10
         BCTR  R1,0               POWER OF 10 - 1
         B     EDVALP10           PROCEED WITH POWER OF 10------------>
EDVALP1D MXR   R0,R4              LESS THAN 0, DIVIDE BY 10
         AH    R1,=H'1'           POWER OF 10 + 1
         B     EDVALP10           PROCEED WITH POWER OF 10------------>
EDVALP1E STD   R0,EDD             NOMINAL VALUE (H/O PART)
         STD   R2,EDDL            NOMINAL VALUE (L/O PART)
         SPACE
EDVALPN  DS    0H                 PROCESSING OF NOMINAL VALUE
         LD    R0,EDD             NOMINAL VALUE (H/O PART)
         LD    R2,EDDL            NOMINAL VALUE (L/O PART)
         LRDR  R4,R0              ROUND EXTENDED INTO DOUBLE
         CLI   TYPE,TYPEE         TYPE "E" CONSTANT      .............?
         BE    EDVALPE            YES, TYPE "E"          ------------->
         CLI   TYPE,TYPEL         TYPE "L" CONSTANT      .............?
         BE    EDVALPL            YES, TYPE "L"          ------------->
*  TYPE "D" CONSTANT
         LA    R0,8               FULLWORD LENGTH
         STD   R4,EDD             STORE IT IN EDD
EDVALPDE LH    R1,OUTOFFS         OUTPUT OFFSET
         LR    R14,R1             SAVE IT IN R14
         A     R14,OUTRA          LOCATION IN OUTREC
         AR    R1,R0              OFFSET + LENGTH OF CONSTANT
         CH    R1,LRECL           LRECL EXCEEDED          ............?
         BH    EDVLEXC            YES, LRECL EXCEEDED     ------------>
         STH   R1,OUTOFFS         NEW OUTPUT OFFSET
         CR    R1,ABC             IS GREATER THAN "ABC"   ............?
         BNH   EDNVPM             NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R1             YES, CHANGE "ABC" TO HIGHER VALUE...?
EDNVPM   CLI   TYPE,TYPED         TYPE "D" CONSTANT       ............?
         BE    EDNVPDM            YES, TYPE "D"           ------------>
         CLI   TYPE,TYPEE         TYPE "E" CONSTANT       ............?
         BE    EDNVPEM            YES, TYPE "E"           ------------>
         MVC   0(16,R14),EDD      NO, TYPE "L",  MOVE IT TO OUTREC=====
         B     EDVALPR            RETURN
EDNVPDM  MVC   0(8,R14),EDD       TYPE "D",      MOVE IT TO OUTREC=====
         B     EDVALPR            RETURN
EDNVPEM  MVC   0(4,R14),EDE       MOVE FP "E"   TO OUTREC==============
         B     EDVALPR            RETURN
EDVALPE  LA    R0,4               TYPE "E" CONST.LENGTH
         LRER  R0,R4              LOAD ROUNDED LONG TO SHORT
         STE   R0,EDE             STORE SHORT FP NUMBER
         B     EDVALPDE           CONTINUE ( MOVE E INTO OUTREC )----->
EDVALPL  LA    R0,16              TYPE "L" CONST.LENGTH
         B     EDVALPDE           CONTINUE ( MOVE L INTO OUTREC )----->
         SPACE
*   LRECL EXCEEDED FOR TYPE "L", "D" OR "E" CONSTANT
EDVLEXC  DS    0H
         TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    EDVALPR            YES, RETURN FROM FP VALUE PROC------>
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        MESSAGE ADDRESS
EDVALPER BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     EDVALPR            YES, RETURN FROM FP VALUE PROC------>
*   MAGNITUDE OF "L", "D" OR "E" CONSTANT EXCEEDED
EDVALPME LA    R1,VALOORM         MESSAGE ADDRESS
         B     EDVALPER           PRINT ERROR MESSAGE
         SPACE
EDVALPR  DS    0H
         SUBRET EDVALP            RETURN
         SPACE
* PROCESSING OF EXPONENT OF "L", "D" OR "E" TYPE CONSTANT
EDEXPP   SUBENT
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   EDEXPL0            NO, LENGTH = 0         ------------->
         CH    CVALL,=H'3'        LENGTH OF EXPONENT VALUE > 3........?
         BH    EDEXPL1            YES, MAX LENGTH EXCEEDED------------>
         BAL   R14,CONVB          CONVERT EXPONENT TO BINARY
         STH   CVALL,EDEXP        SAVE VALUE OF EXPONENT
EDEXPPR  SUBRET EDEXPP            RETURN TO CALLER
*   VALUE OF EXPONENT NOT SPECIFIED MESSAGE
EDEXPL0  LA    R1,EDEXPVNS        EXPONENT NOT SPECIFIED MSG ADDRESS
EDEXPL0M BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     EDEXPPR            RETURN FROM EDEXPP PROC------------->
*   LENGTH OF EXPONENT > 3 DECIMAL DIGITS
EDEXPL1  LA    R1,EDEXPLEX        MESSAGE ADDRESS
         B     EDEXPL0M           PRINT ERROR MESSAGE
         SPACE
*   ALIGNMENT OF "L", "D" AND "E" TYPE CONSTANTS
EDALIGN  SUBENT
         TM    FLAGS1,OFFSP       ALIGNMENT HAS TO BE PERFORMED.......?
         BO    EDALIGNR           NO, OUTOFFS WILL NOT BE CHANGED----->
         TM    PARMFLGS,ALIGN     ALIGNMENT HAS TO BE PERFORMED.......?
         BNO   EDALIGNR           NO, OUTOFFS WILL NOT BE CHANGED----->
         LH    R1,OUTOFFS         OUTPUT OFFSET
         TM    OUTOFFS+1,BIT6+BIT7 IS ALREADY ON FULLWORD BOUNDARY....?
         BZ    EDALIGND           YES, CHECK DOUBLEWORD   ------------>
         TM    OUTOFFS+1,BIT6+BIT7 ALL LAST TWO BITS ON   ............?
         BO    EDALIGN1           YES, ADD 1 TO OUTOFFS   ------------>
         TM    OUTOFFS+1,BIT6     BIT6 ON                 ............?
         BO    EDALIGN2           YES, ADD 2 TO OUTOFFS   ------------>
         LA    R1,3(0,R1)         NO, ADD 3
         B     EDALIGND           CHECK IF DOUBLEWORD     ------------>
EDALIGN1 LA    R1,1(0,R1)         ADD 1 TO OUTOFFS
         B     EDALIGND           CHECK IF DOUBLEWORD     ------------>
EDALIGN2 LA    R1,2(0,R1)         ADD 2 TO OUTOFFS
         B     EDALIGND           CHECK IF DOUBLEWORD     ------------>
EDALIGND CLI   TYPE,TYPEE         TYPE "E" CONSTANT       ............?
         BE    EDALIGNE           YES, EXIT FROM ALIGNMENT------------>
* TYPE "L" OR "D" CONSTANT ALIGNMENT
         TM    OUTOFFS+1,BIT5     BIT5 ON                 ............?
         BNO   EDALIGNE           NO, ALREADY ALIGNED     ------------>
         LA    R1,4(0,R1)         YES, ADD 4 TO OUTOFFS   ------------>
EDALIGNE STH   R1,OUTOFFS         STORE ALIGNED OFFSET
EDALIGNR SUBRET EDALIGN
         SPACE 2
* PROCESSING OF A FIXED POINT NOMINAL VALUE
FPNVP    SUBENT
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   FPVALL0            NO, LENGTH = 0         ------------->
         CH    CVALL,FPNVL        IS CONSTANT'S LENGTH <= MAX.........?
         BH    FPVALL1            NO, MAX LENGTH EXCEEDED------------->
         BAL   R14,CONVB          CONVERT NOMINAL VALUE TO BINARY
         C     CVALL,FPMAXV       IS LESS OR EQUAL TO MAX.VALUE.......?
         BH    FPMAXVEX           NO, MAX.VALUE EXCEEDED ------------->
         C     CVALL,FPMINV       ISGREATER OR EQUAL TO MIN.VALUE.....?
         BL    FPMINVEX           NO, MIN.VALUE EXCEEDED ------------->
         ST    CVALL,D            SAVE VALUE IN "D"
         CLI   TYPE,TYPEF         TYPE "F" CONSTANT      .............?
         BNE   FPNVPH             NO, TYPE "H"           ------------->
*  TYPE "F" CONSTANT
         LA    R0,4               FULLWORD LENGTH
FPNVPFH  LH    R1,OUTOFFS         OUTPUT OFFSET
         LR    R14,R1
         A     R14,OUTRA          LOCATION IN OUTREC
         AR    R1,R0              OFFSET + LENGTH OF CONSTANT
         CH    R1,LRECL           LRECL EXCEEDED          ............?
         BH    FPVLEXC            YES, LRECL EXCEEDED     ------------>
         STH   R1,OUTOFFS         NEW OUTPUT OFFSET
         CR    R1,ABC             IS GREATER THAN "ABC"   ............?
         BNH   FPNVPM             NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R1             YES, CHANGE "ABC" TO HIGHER VALUE...?
FPNVPM   CLI   TYPE,TYPEF         TYPE "F" CONSTANT       ............?
         BNE   FPNVPHM            NO, TYPE "H"            ------------>
         MVC   0(4,R14),D         YES, TYPE "F", MOVE IT TO OUTREC=====
         B     FPNVPR             RETURN
FPNVPHM  MVC   0(2,R14),D+2       MOVE HALFWORD TO OUTREC==============
         B     FPNVPR             RETURN
FPNVPH   LA    R0,2               HALFWORD LENGTH
         B     FPNVPFH            CONTINUE ( MOVE H INTO OUTREC )----->
FPNVPR   SUBRET FPNVP             RETURN
         SPACE
FPVALPR  SUBRET FPVALP            RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*  "X" TYPE CONSTANT PROCESSING                                       *
*---------------------------------------------------------------------*
         SPACE
PIDVTX   DS    0H                 TYPE = X CONSTANT PROCESSING
         MVC   OUTCSOFF,OUTOFFS   OFFSET OF FIRST NOMINAL VALUE
PIDVTXN  DS    0H                 TYPE = X CONSTANT NOMINAL VALUE PROC.
         BAL   R14,CNVINIT        INIT OF PROCESSING FOR CONST VALUE
PIDVTX0  LA    SCANADR,1(0,SCANADR) NEXT SCAN CHAR ADDRESS
         SH    SCANLEN,=H'1'      ARE THERE ANY CHARS LEFT ON THIS REC?
         BNP   PIDVTXC1           NO, CHECK CONTINUATION  ------------>
PIDVTX1  EX    R0,TRTSCAN         FIND OUT WHAT CHARACTER
         SLL   R2,24              STRIP 3 H/O BYTES
         SRL   R2,24              TO GET FUNCTION BYTE VALUE
         B     PIDVTXCS-INVCHC(R2) BR TO CHARACTER SELECTION BR TABLE
PIDVTXCS B     PIDVTXIC           INVALID CHARACTER       ------------>
         B     PIDVTX1O           HEXADECIMAL DIGIT       ------------>
         B     PIDVTXK            COMMA                   ------------>
         B     PIDVTXX            RIGHT DELIMITER         ------------>
         SPACE
PIDVTX1O MVC   0(1,CVALA),0(SCANADR) MOVE VALUE CHARACTER INTO OUTPUT
         LA    CVALA,1(0,CVALA)   NEXT OUTPUT CHAR ADDRESS
         LA    CVALL,1(0,CVALL)   LENGTH OF NOMINAL VALUE STRING
         B     PIDVTX0            CHECK NEXT CHARACTER    ------------>
PIDVTXK  DS    0H                 COMMA, MULTIPLE VALUES SPECIFIED
         BAL   R14,HEXVALP        HEXA NOMINAL VALUE PROCESSING
         B     PIDVTXN            NEXT NOMINAL VALUE PROCESSING
* END OF HEXADECIMAL CONSTANT FOUND
PIDVTXX  BAL   R14,HEXVALP        PROCESS LAST NOMINAL VALUE
         BAL   R14,DUPFPROC       PROCESS DUPLICATION FACTOR IF SPECIF
         B     PIDNEXTC           PROCESSING OF THE NEXT CONSTANT
*  CONTINUATION OF HEXADECIMAL CONSTANT ON NEXT INPUT RECORD
PIDVTXC1 LA    R14,PIDVTX1        RETURN ADDRESS
         B     PIDCCONT           SEARCH FOR RIGHT DELIMITER CONT----->
         SPACE
*  INVALID CHARACTER IN HEXADECIMAL CONSTANT VALUE
PIDVTXIC DS    0H
         BAL   R14,INVCPROC       CHECK IF CONSECUTIVE OCCURENCE
         LA    R1,INVCHARM        INVALID CHARACTER MESSAGE
         B     PIDCNSTE           CONSTANT SPECIFICATION ERROR-------->
         SPACE
* HEXADECIMAL CONSTANT NOMINAL VALUE PROCESSING
         SPACE
HEXVALP  SUBENT
         LTR   CVALL,CVALL        IS VALUE LENGTH > 0    .............?
         BNP   HEXVALL0           NO, LENGTH = 0         ------------->
         BAL   R14,CONVHEX        CONVERT HEXADECIMAL TEXT
*                                 CVALL WILL CONTAIN RESULTING STRING
*                                 LENGTH
         TM    FLAGS1,LENMP       LENGTH MODIFIER SPECIFIED...........?
         BNO   HEXVALDL           NO, DEFAULT LENGTH       ----------->
         C     CVALL,LENGTHM      IS DEFAULT LENGTH <= LENGTH MODIF...?
         BH    HEXVALL2           NO, ERROR, TOO LARGE VALUE SPECIF--->
         BE    HEXVALDL           DEFAULT LENGTH = LENGTH MODIFIER---->
*        LENGTH MODIFIER > DEFAULT LENGTH - LEADING ZEROS ARE REQUIRED
         L     R1,OUTRWAA         WORK AREA ADDRESS
         LR    R15,R1
         A     R1,LENGTHM         + LENGTH MODIFIER
         BCTR  R1,0               - 1 = LAST BYTE ADDRESS (OUTPUT)
         AR    R15,CVALL          + DEFAULT LENGTH
         BCTR  R15,0              - 1 = LAST BYTE ADDRESS (INPUT)
         LR    R14,CVALL          DEFAULT LENGTH
HEXVALP1 MVC   0(1,R1),0(R15)     SHIFT RESULT INTO RIGHT
         BCTR  R1,0               OUTPUT ADDRESS - 1
         BCTR  R15,0              INPUT  ADDRESS - 1
         BCT   R14,HEXVALP1       MOVE NEXT CHARACTER
         L     R14,LENGTHM        LENGTH MODIFIER
         SR    R14,CVALL          - DEFAULT LENGTH=NO.OF LEADING ZEROS
HEXVALP2 MVI   0(R1),X'00'        PUT LEADING ZEROS
         BCTR  R1,0               OUTPUT ADDRESS - 1
         BCT   R14,HEXVALP2       NEXT LEADING ZERO
         L     CVALL,LENGTHM      EXPLICIT LENGTH WILL BE TAKEN
HEXVALDL EQU   *
         LH    R1,OUTOFFS         OUTPUT OFFSET
         LR    R14,R1
         AR    R1,CVALL           OFFSET + CHAR.STRING LENGTH = RECL
         CH    R1,LRECL           LRECL EXCEEDED          ............?
         BH    HEXVLEXC           YES, LRECL EXCEEDED     ------------>
         STH   R1,OUTOFFS         NEW OUTPUT OFFSET
         CR    R1,ABC             IS GREATER THAN "ABC"   ............?
         BNH   HEXVAL1            NO, SKIP AROUND CHANGE  ------------>
         LR    ABC,R1             YES, CHANGE "ABC" TO HIGHER VALUE...?
HEXVAL1  A     R14,OUTRA          OUTOFFS + OUT.REC.ADDR = OUT MVC ADR
         LR    R15,CVALL          LENGTH OF RESULTING VALUE OF HEX.CNST
         L     R0,OUTRWAA         HEX.CONSTANT VALUE ADDRESS
         LR    R1,CVALL           LENGTH OF MOVED STRING
         MVCL  R14,R0             MOVE HEXADECIMAL VALUE INTO OUTREC
HEXVALR  SUBRET HEXVALP           RETURN TO CALLER
         SPACE
*  TYPE "X" CONSTANT NOMINAL VALUE LENGTH = 0 CHARACTERS
HEXVALL0 DS    0H
         LA    R1,DECVLL0M        MESSAGE ADDRESS
HEXVALER BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     HEXVALR            RETURN FROM DECIMAL VALUE PROC.
         SPACE
*  TYPE "X" CONSTANT NOMINAL VALUE IMPLICIT LENGTH > LENGTH MODIFIER
HEXVALL2 DS    0H
         LA    R1,VALELEM         MESSAGE ADDRESS
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         L     R0,OUTRWAA         OUTPUT ADDRESS
         L     R1,LENGTHM         EXPLICIT LENGTH
         LR    R14,R0             WORK AREA ADDRESS
         LR    R15,CVALL          IMPLICIT LENGTH
         S     R15,LENGTHM        CVALL-LENGTHM=NO.OF LEADING TRUC.CHAR
         AR    R14,R15            INPUT ADDRESS
         LR    R15,R1             LENGTH OF MOVED STRING
         MVCL  R0,R14             MOVE AND TRUNCATE LEADING CHARS
         L     CVALL,LENGTHM      VALUE WILL BE TRUNCATED TO EXPLICIT
         B     HEXVALDL           LENGTH                 ------------->
         SPACE
*  TYPE "X" CONSTANT - LRECL EXCEEDED
HEXVLEXC DS    0H
         TM    FLAGS2,LRECLEX     MESSAGE ALREADY PRINTED.............?
         BO    HEXVALR            YES, RETURN FROM DEC.VALUE PROC----->
         OI    FLAGS2,LRECLEX     SET THIS MSG PRINTED ALREADY FLAG
         LA    R1,LRECEXCM        MESSAGE ADDRESS
         B     HEXVALER           PRINT ERROR MESSAGE
         SPACE
* PROCESSING OF DUPLICATION FACTOR ON OUTPUT
         SPACE
DUPFPROC SUBENT
         TM    FLAGS1,DUPFP       DUPLICATION FACTOR SPECIFIED........?
         BNOR  R14                NO, RETURN              ------------>
         L     R15,DUPF           VALUE OF DUPLICATION FACTOR
         CH    R15,=H'1'          IS GRAETER THAN 1       ............?
         BNHR  R14                NO, RETURN              ------------>
         BCTR  R15,0              DUP.FACTOR - 1
         LH    R14,OUTOFFS        AVAILABLE OUTPUT OFFSET
         SH    R14,OUTCSOFF       - START OF CONST.OFFSET=CONST.LENGTH
DUPFP1   LR    R1,R14             LENGTH OF MOVED STRING
         LH    R0,OUTOFFS         AVAILABLE OFFSET
         AR    R0,R1              LENGTH OF FILLED PART OF OUTREC
         CH    R0,LRECL           IS RECL O.K.            ............?
         BH    LRECLEXC           NO, LRECL EXCEEDED      ------------>
         STH   R0,OUTOFFS         NEXT AVAILABLE OFFSET IN OUT.REC
         CR    R0,ABC             GREATER THAN "ABC"      ............?
         BNH   DUPFP2             NO, DO NOT CHANGE "ABC" ------------>
         LR    ABC,R0             YES, CHANGE "ABC"
DUPFP2   SR    R0,R1              CURRENT AVAILABLE OFFSET
         A     R0,OUTRA           AVAILABLE ADDRESS IN OUTREC
         LH    R2,OUTCSOFF        OFFSET OF BEGINNING OF THE CONST.
         A     R2,OUTRA           CONST.ADDRESS IN OUTREC
         LR    R3,R1              CONSTANT LENGTH
         MVCL  R0,R2              DUPLICATE CONSTANT IN OUTREC
         BCT   R15,DUPFP1         REPEAT DUPLICATION IF REQUIRED
         SUBRET DUPFPROC          RETURN TO CALLER
         SPACE
*  NO MORE CONSTANTS OR COMMENTS ON THIS INPUT RECORD
PIDNMC   BAL   R14,PRNTCIR        PRINT CURRENT INPUT RECORD
         CLI   REC80+71,X'40'     IS RECORD CONTINUATION MARK PRESENT.?
         BE    PROCINDR           NO, RETURN, ONE OUT RECORD PROCESSED
         OI    FLAGS1,CEXPCT      CONTINUATION OF OUT.REC. EXPECTED
         BAL   R14,GETNREC        READ NEXT INPUT RECORD
         B     PIDCDT             PROCESS NEXT CONSTANT FROM INPUT
PROCINDR SUBRET PROCIND           RETURN
TRTSCAN  TRT   0(1,SCANADR),TRT   TRT TO IDENTIFY NEXT CHAR OF P CONST
         SPACE
INVCHC   EQU   4                  INVALIDE CHARACTER CODE
NUMERIC  EQU   INVCHC+4           NUMERIC CODE
HEXDC    EQU   NUMERIC            HEXADECIMAL DIGIT CODE
LDLMC    EQU   HEXDC+4            LEFT DELIMITER CODE
RDLMC    EQU   LDLMC+4            RIGHT DELIMITER CODE
SLASH    EQU   RDLMC+4            SLASH CODE
TYPEA    EQU   SLASH+4            TYPE A FIELD CODE
TYPEC    EQU   TYPEA+4            TYPE C FIELD CODE
TYPEF    EQU   TYPEC+4            TYPE F FIELD CODE
TYPEH    EQU   TYPEF+4            TYPE H FIELD CODE
TYPEP    EQU   TYPEH+4            TYPE P FIELD CODE
TYPEX    EQU   TYPEP+4            TYPE X FIELD CODE
TYPEE    EQU   TYPEX+4            TYPE E FIELD CODE
TYPED    EQU   TYPEE+4            TYPE D FIELD CODE
TYPEL    EQU   TYPED+4            TYPE L FIELD CODE
TYPEZ    EQU   TYPEL+4            TYPE Z FIELD CODE
         SPACE
*---------------------------------------------------------------------*
*  CONVERTS VALUE OF LENGTH OR OFFSET MODIFIERS OR DUPL.FACTOR        *
*  TO BINARY.                                                         *
*---------------------------------------------------------------------*
         SPACE
CONVB    SUBENT
         BAL   R14,CONVDEC        CONVERT IT TO DECIMAL
         CP    D,MAXBIN           MAX.BINARY NUMBER EXCEEDED..........?
         BH    CONVBER            YES, ERROR              ------------>
         CP    D,=P'-2147483648'  MIN.BINARY NUMBER EXCEEDED..........?
         BL    CONVBER            YES, ERROR              ------------>
         CVB   CVALL,D            CONVERT TO BINARY
CONVBR   SUBRET CONVB             RETURN TO CALLER
CONVBER  LA    R1,VALOORM         BINARY NUMBER OUT OF RANGE MESSAGE
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         SR    CVALL,CVALL        ZERO INTO VALUE REGISTER
         B     CONVBR             RETURN                  ------------>
         SPACE
*---------------------------------------------------------------------*
*  CONVERTS NOMINAL VALUE TO PACKED DECIMAL                           *
*  VALUE TO BE CONVERTED IS IN OUTRWA FIELD, ITS LENGTH IS IN CVALL   *
*  RESULT WILL BE IN FIELD "D" AND CVALL WILL CONTAIN LENGTH OF       *
*  SIGNIFICANT BYTES IN "D" FIELD.                                    *
*---------------------------------------------------------------------*
         SPACE
CONVDEC  SUBENT
         SR    CVALA,CVALL        ADDRESS OF VALUE STRING
         BCTR  CVALL,0            VALUE STRING LENGTH - 1
         EX    CVALL,PACKDECV     PACK DECIMAL VALUE
         CLI   VALSIGN,C'+'       POSITIVE VALUE          ............?
         BE    CONVDEC1           YES, GOTO IMPLICIT LENGTH CHECK----->
         NI    D+7,X'F0'          NO, NEGATIVE VALUE, STRIP PLUS SIGN
         OI    D+7,X'0D'          MINUS SIGN
CONVDEC1 LA    CVALL,8            NUMBER OF SIGNIFICANT DIGITS
         LA    R14,D              FIRST CHAR. ADDRESS
CONVDEC2 CLI   0(R14),X'00'       NON SIGNIFICANT DIGITS..............?
         BNE   CONVDECR           NO, SIGNIFICANT, RETURN------------->
         LA    R14,1(0,R14)       NEXT CHAR ADDRESS
         BCT   CVALL,CONVDEC2     NO OF CHARS - 1, GOTO CHECK NEXT---->
CONVDECR SUBRET CONVDEC           RETURN TO CALLER
PACKDECV PACK  D,0(1,CVALA)       PACK DECIMAL VALUE
         SPACE
*---------------------------------------------------------------------*
*  CONVERTS HEXADECIMAL NOMINAL VALUE INTO CHARACTER FORMAT.          *
*  VALUE TO BE CONVERTED IS IN OUTRWA FIELD, ITS LENGTH IS IN CVALL.  *
*  RESULT WILL BE ALSO IN OUTRWA AND LENGTH IN CVALL.                 *
*---------------------------------------------------------------------*
         SPACE
CONVHEX  SUBENT
         L     R1,OUTRWAA         WORK AREA ADDRESS
         STC   CVALL,CHAR6        LAST BYTE OF CVALL
         TM    CHAR6,BIT7         EVEN NUMBER OF HEXADECIMAL DIGITS...?
         BNO   CONVHEX2           YES, DO CONVERSION   --------------->
*                                 NO, INSERT ONE LEADING ZERO
         AR    R1,CVALL           + LENGTH = OUTPUT ADDRESS
         LR    R14,R1
         BCTR  R14,0              - 1 = INPUT ADDRESS
         LR    R15,CVALL          LENGTH OF INPUT HEX STRING
CONVHEX1 MVC   0(1,R1),0(R14)     SHIFT RESULT INTO RIGHT
         BCTR  R1,0               OUTPUT ADDRESS - 1
         BCTR  R14,0              INPUT  ADDRESS - 1
         BCT   R15,CONVHEX1       MOVE NEXT CHARACTER
         LA    CVALL,1(0,CVALL)   LENGTH + 1
         MVI   0(R1),C'0'         PUT LEADING ZERO
CONVHEX2 SRL   CVALL,1            LENGTH OF RESULT ( INPUT LENGTH / 2 )
         LR    R14,CVALL
         LR    R15,R1             INPUT ADDRESS
         MVC   TRTAB+C'0'(10),=X'00010203040506070809'
         MVC   TRTAB+C'A'(6),=X'0A0B0C0D0E0F'
CONVHEXP TR    0(2,R1),TRTAB      TRANSLATE TWO BYTES INTO HEX.ZONED
         IC    R0,0(0,R1)         FIRST CHARACTER FROM TWO CONSECUTIVE
         SLL   R0,4               SHIFT NUMERIC 4 BITS TO THE LEFT
         STC   R0,0(0,R15)        STORE IT BACK INTO OUTPUT
         OC    0(1,R15),1(R1)     COMBINE IT WITH NUM.OF THE NEXT CHAR.
         LA    R1,2(0,R1)         NEXT TWO INPUT CHARACTERS ADDRESS
         LA    R15,1(0,R15)       NEXT OUTPUT CHARACTER ADDRESS
         BCT   R14,CONVHEXP       CONVERT NEXT TWO HEX DIGITS INTO BYTE
CONVHEXR SUBRET CONVHEX           RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*  CHECK IF CONSECUTIVE OCCURENCE OF INVALID CHARACTER ON INPUT REC   *
*---------------------------------------------------------------------*
         SPACE
INVCPROC DS    0H
         TM    FLAGS2,INVCHAR     CHECK IF CONSECUTIVE OCCURENCE
         BO    PIDNEXTC           YES, DO NOT PRINT ERROR MSG
         OI    FLAGS2,INVCHAR     INVALID CHAR MESSAGE PRINTED FLAG
         BR    R14
         SPACE
*---------------------------------------------------------------------*
*  CONTINUATION OF CONSTANT EXPECTED ON NEXT INPUT RECORD             *
*---------------------------------------------------------------------*
         SPACE
PIDCCONT SUBENT
         CLI   REC80+71,X'40'     IS RECORD CONTINUATION MARK PRESENT.?
         BE    PIDMCSC            NO, MISSING CONSTANT SPECIF.CONTINU->
         BAL   R14,PRNTCIR        PRINT CURRENT INPUT RECORD
         OI    FLAGS2,CONTEXP     CONTINUATION EXPECTED FLAG
         BAL   R14,GETNREC        READ NEXT INPUT RECORD
         NI    FLAGS2,X'FF'-CONTEXP CONTINUATION RECEIVED
         SUBRET PIDCCONT          RETURN TO CONSTANT PROCESSING
         SPACE 2
*---------------------------------------------------------------------*
*   MISSING CONSTANT CONTINUATION ERROR MSG                           *
*---------------------------------------------------------------------*
PIDMCSC  LA    R1,MCSCM           MISSING CONSTANT CONTINUATION MSG
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     PROCESOR           PROCESS NEXT OUTPUT RECORD
         SPACE 2
*---------------------------------------------------------------------*
*   CONSTANT SPECIFICATION ERROR ( R1 CONTAINS ERROR MSG. ADDRESS )   *
*---------------------------------------------------------------------*
PIDCNSTE DS    0H
         OI    FLAGS2,INVCHAR     TO PREVENT INVALID CHARACTER MESSAGE
         BAL   R14,ERMSGP         PRINT ERROR MESSAGE
         B     PIDNEXTC           PROCESS NEXT CONSTANT
         SPACE 2
*---------------------------------------------------------------------*
*  INITIALYZE PROCESSING OF A NEW OUTPUT RECORD                       *
*---------------------------------------------------------------------*
         SPACE
INITOR   SUBENT
* INITIALYZE OUTPUT RECORD AREA WITH PAD CHARACTER
         LA    R0,OUTR            ADDRESS OF OUTPUT RECORD
         LH    R1,LRECL           LENGTH OF OUTPUT RECORD
         SR    R14,R14            SECOND OPERAND FOR MVCL
         IC    R15,PADCHAR        PAD CHARACTER
         SLL   R15,24             SHIFT IT INTO BIT POS. 0-7
         MVCL  R0,R14             MOVE PAD CHAR INTO OUTPUT RECORD
         SR    ABC,ABC            AVAILABEL BYTE COUNT = 0
         TM    FLAGS,RECFMV       VARIABLE RECORD FORMAT .............?
         BNO   INITORET           NO                     ------------->
         LA    ABC,4               YES, ABC = 4
INITORET SUBRET INITOR
         SPACE 2
*---------------------------------------------------------------------*
*  INITIALYZE PROCESSING OF A NEW NOMINAL VALUE OF A CONSTANT         *
*---------------------------------------------------------------------*
         SPACE
CNVINIT  SUBENT
         NI    FLAGS1,X'FF'-OFFSP TURN OFF OFFSET SPECIFIED FLAG
         TM    PRNTFLGS,PRNTOFF   OFFSET OF FIRST CONSTANT ALREADY
*                                 KNOWN...............................?
         BO    CNVINIT1           YES, DO NOT CHANGE      ------------>
         MVC   PRNTOFFS,OUTOFFS   OFFSET OF FIRST CONSTANT ON THIS CARD
         OI    PRNTFLGS,PRNTOFF   SET PRINT OFFSET FLAG
CNVINIT1 SR    CVALL,CVALL        CONSTANT VALUE LENGTH = 0
         L     CVALA,OUTRWAA      OUTPUT ADDRESS VALUE
         MVI   FLAGS2,X'00'       INITIALYZE FLAGS
         MVI   TRT,INVCHC         INVALID CHARACTER
         MVC   TRT+1(L'TRT-1),TRT INIT TRT WITH INV.CHAR.CODE
         SR    R15,R15            ZERO R15
         IC    R15,TYPE           CONSTANT TYPE
         B     CNVITS-TYPEA(R15)  CONSTANT TYPE SELECTION
CNVITS   B     CNVITA             TYPE A CONSTANT
         B     CNVITC             TYPE C CONSTANT
         B     CNVITF             TYPE F CONSTANT
         B     CNVITH             TYPE H CONSTANT
         B     CNVITP             TYPE P CONSTANT
         B     CNVITX             TYPE X CONSTANT
         B     CNVITE             TYPE E CONSTANT
         B     CNVITD             TYPE D CONSTANT
         B     CNVITL             TYPE L CONSTANT
         B     CNVITZ             TYPE Z CONSTANT
*  FIXED POINT CONSTANT
CNVITF   EQU   *
CNVITH   EQU   *
CNVITP   EQU   *
CNVITZ   EQU   *
         BAL   R14,CNVINITN       INITIALISATION FOR NUMERICS
         B     CNVINITR           RETURN
CNVITX   EQU   *
         MVC   TRT+C'A'(6),=6AL1(HEXDC) HEXADECIMAL DIGITS
         MVC   TRT+C'0'(10),=10AL1(HEXDC) DECIMAL DIGIT
         MVI   TRT+C',',HEXDC+4   COMMA (NOMINAL VALUE DELIMITER)
         MVI   TRT+C'''',HEXDC+8    RIGHT VALUE DELIMITER
         B     CNVINITR           RETURN
*  FLOATING POINT CONSTANTS
CNVITE   EQU   *
CNVITD   EQU   *
CNVITL   EQU   *
         BAL   R14,CNVINITN       INITIALISATION FOR NUMERICS
         MVI   TRT+C'E',NUMERIC+20 EXPONENT SPECIFICATION
         B     CNVINITR           RETURN
CNVITA   EQU   *
         MVC   TRT+C'0'(10),=10AL1(NUMERIC) DECIMAL DIGIT
         MVI   TRT+C')',NUMERIC+4  RIGHT VALUE DELIMITER
         MVI   TRT+C',',NUMERIC+8  COMMA (NOMINAL VALUE DELIMITER)
CNVITC   EQU   *
CNVINITR SUBRET CNVINIT           RETURN
         SPACE
CNVINITN DS    0H                 INITIALISATION OF TRT FOR NUMERICS
         MVI   VALSIGN,C'+'       DIFAULT SIGN OF A FIXED POINT CONST
         MVC   TRT+C'0'(10),=10AL1(NUMERIC) DECIMAL DIGIT
         MVI   TRT+C'+',NUMERIC+4 DECIMAL SIGN
         MVI   TRT+C'-',NUMERIC+4 DECIMAL SIGN
         MVI   TRT+C'.',NUMERIC+8 DECIMAL POINT
         MVI   TRT+C',',NUMERIC+12 COMMA (NOMINAL VALUE DELIMITER)
         MVI   TRT+C'''',NUMERIC+16 RIGHT VALUE DELIMITER
         BR    R14                RETURN
         SPACE 2
*---------------------------------------------------------------------*
*  INITIALYZE PROCESSING OF A NEW CONSTANT ON INPUT RECORD            *
*---------------------------------------------------------------------*
         SPACE
NEWCNSTI SUBENT
         MVI   TRT,INVCHC         INIT TRT TABLE
         MVC   TRT+1(L'TRT-1),TRT
         MVI   TRT+X'40',X'00'    IGNORE BLANKS
         MVI   TRT+C'/',SLASH     START OF COMMENT
         MVC   TRT+C'0'(10),=10AL1(NUMERIC) PROCESS NUMERICS (DUP.FACT)
         MVI   TRT+C'A',TYPEA     PROCESS TYPE FILED
         MVI   TRT+C'C',TYPEC     PROCESS TYPE FILED
         MVI   TRT+C'F',TYPEF     PROCESS TYPE FILED
         MVI   TRT+C'H',TYPEH     PROCESS TYPE FILED
         MVI   TRT+C'P',TYPEP     PROCESS TYPE FILED
         MVI   TRT+C'X',TYPEX     PROCESS TYPE FILED
         MVI   TRT+C'E',TYPEE     PROCESS TYPE FILED
         MVI   TRT+C'D',TYPED     PROCESS TYPE FILED
         MVI   TRT+C'L',TYPEL     PROCESS TYPE FILED
         MVI   TRT+C'Z',TYPEZ     PROCESS TYPE FILED
         XR    DUPFL,DUPFL        DUPLICATION FACTOR LENGTH = 0
         L     DUPFA,OUTRWAA      WORK AREA ADDRESS FOR DUP.FACTOR
         MVI   FLAGS1,SEARCHNC    SEARCH FOR A NEW CONSTANT FLAG
         SUBRET NEWCNSTI          RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*  WRITE OUTPUT RECORD SUBROUTINE                                     *
*---------------------------------------------------------------------*
         SPACE
WRITEOR  SUBENT
         LTR   ABC,ABC            AVAILABEL BYTE COUNT = 0 ...........?
         BZR   R14                YES, NO RECORD HES BEEN GENERATED--->
         TM    FLAGS,RECFMV       VARIABLE RECORD FORMAT .............?
         BO    WRITEORV           YES                    ------------->
         TM    FLAGS,RECFMF       FIXED LENGTH RECORD    .............?
         BO    WRITEORF           YES                    ------------->
*   UNDEFINED RECORD FORMAT
         STH   ABC,OUTF+82        LENGTH OF WRITTEN RECORD INTO DCB
WRITEORF L     R0,OUTRA           OUTPUT RECORD ADDRESS
         PUT   OUTF,(0)           PUT OUTPUT RECORD
         LA    R0,1               NUMBER OUF OUTPUT RECORDS + 1
         A     R0,OUTRCNT
         ST    R0,OUTRCNT         NEW OUTPUT RECORD COUNT
         SUBRET WRITEOR           RETURN
*   VARIABLE LENGTH RECORDS
WRITEORV CH    ABC,=H'4'          AVAILABLE BYTE COUNT > 4 ( RDW )....?
         BNHR  R14                NO, NO RECORD HAS BEEN GENERATED---->
         L     R1,OUTRA           OUTPUT RECORD ADDRESS
         XC    0(4,R1),0(R1)      CLEAR RDW
         STH   ABC,0(0,R1)        THIS RECORD LENGTH
         B     WRITEORF           PUT RECORD               ----------->
         SPACE 3
*---------------------------------------------------------------------*
*                                                                     *
*  PARM FIELD PROCESSING ROUTINE                                      *
*                                                                     *
*---------------------------------------------------------------------*
         SPACE
PARMAR   EQU   R4                 PARM ADDRESS REGISTER
PARMLR   EQU   R5                 PARM LENGTH REGISTER
PARMLSA  EQU   R6                 PARM LEFT SIDE ADDRESS
PARMLSL  EQU   R7                 PARM LEFT SIDE LENGTH
PARMRSA  EQU   R8                 PARM RIGHT SIDE ADDRESS
PARMRSL  EQU   R9                 PARM RIGHT SIDE LENGTH
         SPACE
PARMPROC SUBENT
         MVI   PARMFLGS,X'00'     INIT PARM PROCESSING FLAGS
         L     PARMAR,PARMA       PARM ADDRESS
         USING PARML,PARMAR
         MVC   HALF,PARMLEN       PARM LENGTH INTO WORK HALFWORD
         LH    PARMLR,HALF        PARM LENGTH
         LA    PARMAR,PARMT       PARM TEXT ADDRESS
         DROP  PARMAR
         LTR   PARMLR,PARMLR      ARE THERE ANY PARMS SPECIFIED.......?
         BZ    PARMDEF0           NO, TAKE STANDARD DEFAULTS---------->
PARMLRP  BAL   R14,PARMELR        EXTRACT LEFT AND RIGHT SIDE OF PARM
         BAL   R14,PARMSKW        SEARCH FOR KEYWORDS
         B     PARMKWBT(R15)      KEYWORDS BRANCH TABLE
PARMKWBT B     KWINVLD            INVALID KEYWORD
         B     KWPAD              "PAD" KEYWORD
         B     KWALIGN            "ALIGN" KEYWORD
         B     KWNOALIG           "NOALIGN" KEYWORD
         B     KWLNECNT           "LINECNT" KEYWORD
         SPACE
KWPAD    DS    0H                 "PAD" SPECIFIED
         LTR   PARMRSL,PARMRSL    IS THERE RIGHT SIDE SPECIFIED.......?
         BZ    PARMERR            NO, ERROR               ------------>
         CH    PARMRSL,=H'1'      RIGHT SIDE LENGTH = 1   ............?
         BE    PADCHARS           YES, PAD CHARACTER SPECIFIED-------->
         CH    PARMRSL,=H'5'      PAD=X"NN" MAY BE SPECIFIED..........?
         BNE   PARMERR            NO, ERROR               ------------>
         CLC   0(2,PARMRSA),=C'X"' PAD=X"NN" MAY BE SPECIFIED.........?
         BNE   PARMERR            NO, ERROR               ------------>
         CLI   4(PARMRSA),C'"'    PAD=X"NN" MAY BE SPECIFIED..........?
         BNE   PARMERR            NO, ERROR               ------------>
         MVI   TRT,INVCHC         INVALID CHARACTER
         MVC   TRT+1(L'TRT-1),TRT INIT TRT WITH INV.CHAR.CODE
         MVC   TRT+C'A'(6),=10X'00' HEXADECIMAL DIGITS
         MVC   TRT+C'0'(10),=10X'00' HEXADECIMAL DIGITS
         TRT   2(2,PARMRSA),TRT   CHECK FOR NON HEX DIGITS............?
         BNZ   PARMERR            NON HEXADECIMAL CHARS SPECIFIED----->
         L     R14,OUTRWAA        WORK AREA ADDRESS
         MVC   0(2,R14),2(PARMRSA) MOVE TWO HEX DIGITS INTO WORK AREA
         LA    CVALL,2            LENGTH OF HEXADECIMAL STRING
         BAL   R14,CONVHEX        CONVERT IT TO CHARACTER
         L     R14,OUTRWAA       WORK AREA ADDRESS
         MVC   PADCHAR,0(R14)     SAVE PAD CHARACTER
         B     PARMPEX            EXIT                    ------------>
PADCHARS MVC   PADCHAR,0(PARMRSA) MOVE PAD CHARACTER
         B     PARMPEX            EXIT                    ------------>
         SPACE
KWALIGN  DS    0H                 "ALIGN" SPECIFIED
         LTR   PARMRSL,PARMRSL    IS THERE RIGHT SIDE SPECIFIED.......?
         BNZ   PARMERR            YES,ERROR               ------------>
         OI    PARMFLGS,ALIGN     "ALIGNMENT" IN OUTPUT RECORD REQUIRED
         B     PARMPEX            EXIT                    ------------>
         SPACE
KWNOALIG DS    0H                 "NOALIGN" SPECIFIED
         LTR   PARMRSL,PARMRSL    IS THERE RIGHT SIDE SPECIFIED.......?
         BNZ   PARMERR            YES,ERROR               ------------>
         NI    PARMFLGS,X'FF'-ALIGN "NOALIGN" IN OUTPUT RECORD REQUIRED
         B     PARMPEX            EXIT                    ------------>
         SPACE
KWLNECNT DS    0H                 "LINECNT" SPECIFIED
         LTR   PARMRSL,PARMRSL    IS THERE RIGHT SIDE SPECIFIED.......?
         BZ    PARMERR            NO, ERROR               ------------>
         BAL   R14,KWRSCVB        CONVERT KEYWORD RIGHT SIDE TO BINARY
         MVC   LINECNTL,FULLW     LINE COUNT LIMIT
         CLC   LINECNTL,=F'48'    LESS THAN MINIMUM SPECIFIED.........?
         BNL   KWLNEC1            NO                      ------------>
         MVC   LINECNTL,=F'64'    YES, DEFAULT TAKEN
KWLNEC1  MVC   LINECNT,LINECNTL   FORCE FIRST NEW PAGE
         B     PARMPEX            EXIT                    ------------>
         SPACE
KWINVLD  DS    0H                 INVALID KEYWORD SPECIFIED (IGNORED)
         B     PARMERR            PARMS IN ERROR
PARMPEX  LTR   PARMLR,PARMLR      ARE THERE ANY PARMS LEFT............?
         BP    PARMLRP            YES,CHECK NEXT PARMS    ------------>
         B     PARMRET            RETURN                  ------------>
PARMERR  BAL   R14,PARMERRM       PARM ERROR MESSAGE
PARMDEF0 MVI   PARMFLGS,X'00'
PARMRET  SUBRET PARMPROC          RETURN TO CALLER
         SPACE 3
*  EXTRACT LEFT  ( KEYWORD ) AND RIGHT ( VALUE ) SIDE OF A PARM
         SPACE
PARMELR  SUBENT
         XR    PARMRSL,PARMRSL    RIGHT SIDE LENGTH = 0
         XR    PARMLSL,PARMLSL    LEFT SIDE LENGTH = 0
         SPACE
*  EXTRACT LEFT SIDE ( KEYWORD )
         SPACE
*  SEARCH FOR FIRST CHARACTER OF LEFT SIDE
         SPACE
PARMELR0 CLI   0(PARMAR),X'40'    BLANK                    ...........?
         BE    PARMELN            YES, CHECK NEXT CHARACTER----------->
         CLI   0(PARMAR),C','     COMMA                    ...........?
         BE    PARMELN            YES, BYPASS AND CHECK NEXT---------->
PARMEL   LR    PARMLSA,PARMAR     LEFT SIDE ADDRESS
PARMEL1  LA    PARMAR,1(0,PARMAR) NEXT CHARACTER ADDRESS
         LA    PARMLSL,1(0,PARMLSL) LEFT SIDE LENGTH + 1
         SH    PARMLR,=H'1'       LENGTH - 1
         BNP   PARMELRT           EXIT IF = 0             ------------>
         CLI   0(PARMAR),X'40'    BLANK                   ............?
         BE    PARMELB            YES, END OF LEFT SIDE   ------------>
         CLI   0(PARMAR),C'='     EQUAL SIGN              ............?
         BE    PARMELE            YES, EQAL SIGN SPECIFIED------------>
         CLI   0(PARMAR),C','     COMMA SPECIFIED         ............?
         BNE   PARMEL1            NO, NCHECK NEXT CHARACTER OF LEFT--->
PARMELC  SH    PARMLR,=H'1'       PARM LENGTH - 1
         LA    PARMAR,1(0,PARMAR) NEXT CHAR ADDRESS
         B     PARMELRT           RETURN
PARMELN  LA    PARMAR,1(0,PARMAR) NEXT CHAR ADDRESS
         SH    PARMLR,=H'1'       CHECK NEXT CHARACTER OF LEFT SIDE
         BNP   PARMPEX            THERE IS NO LEFT SIDE AT ALL
         B     PARMELR0           SEARCH FOR FIRST CHAR OF LEFT SIDE
PARMELB  DS    0H                 KEWORD TERMINATED BY BLANK
* SEARCH FOR EQUAL SIGN
         LA    PARMAR,1(0,PARMAR) NEXT CHAR ADDRESS
         SH    PARMLR,=H'1'       PARM LENGTH - 1
         BNP   PARMELRT           = 0, NO RIGHT SIDE SPECIFIED-------->
         CLI   0(PARMAR),C'='     EQUAL SIGN              ............?
         BE    PARMELE            YES, EXTRACT RIGHT SIDE ------------>
         CLI   0(PARMAR),X'40'    BLANK                   ............?
         BE    PARMELB            YES, BYPASS             ------------>
         CLI   0(PARMAR),C','     COMMA                   ............?
         BE    PARMELC            YES, THERE IS NO RIGHT SIDE--------->
         B     PARMELRT           NO, START OF NEXT PARM SPECIF------->
* EQUAL SIGN FOUND, EXTRACT RIGHT SIDE
PARMELE  LA    PARMAR,1(0,PARMAR) NEXT CHAR ADDRESS
         SH    PARMLR,=H'1'       LEFT PARM LENGTH - 1
         BNP   PARMERR            = 0, ERROR,LEFT SIDE VALUE NOT SPEC->
         CLI   0(PARMAR),X'40'    BLANK                   ............?
         BE    PARMELE            YES, BYPASS             ------------>
         CLI   0(PARMAR),C','     COMMA                   ............?
         BE    PARMERR            YES, RIGHT SIDE VALUE NOT SPECIF---->
         LR    PARMRSA,PARMAR     RIGHT SIDE ADDRESS
PARMER   DS    0H                 EXTRACT RIGHT SIDE
         LA    PARMAR,1(0,PARMAR) NEXT CHAR ADDRESS
         LA    PARMRSL,1(0,PARMRSL) RIGHT SIDE ( VALUE ) LENGTH + 1
         CH    PARMRSL,=H'15'     RIGHT SIDE LENGTH > 15  ............?
         BH    PARMERR            YES, ERROR              ------------>
         SH    PARMLR,=H'1'       LEFT PARM LENGTH - 1
         BNP   PARMELRT           = 0, RETURN             ------------>
         CLI   0(PARMAR),X'40'    BLANK                   ............?
         BE    PARMERE            YES, END OF RIGHT SIDE  ------------>
         CLI   0(PARMAR),C','     COMMA                   ............?
         BNE   PARMER             NO, CHECK NEXT CHAR OF RIGHT SIDE--->
PARMERE  LA    PARMAR,1(0,PARMAR) NEXT PARM CHAR ADDRESS
         SH    PARMLR,=H'1'       LEFT PARM LENGTH
PARMELRT SUBRET PARMELR
         SPACE
*  SEARCH FOR SPECIFIED KEYWORD IN THE TABLE OF KEYWORDS
         SPACE
PARMSKW  SUBENT
         LA    R14,PARMKWT        PARM KEYWORDS TABLE ADDRESS
         USING KWTE,R14           KEYWORD ENTRY FORMAT ADDRESSABILITY
         XR    R15,R15
PARMSKWL IC    R15,KWLEN          KEYWORD LENGTH
         LTR   R15,R15            KEYWORD LENGTH = 0 (UNKNOWN KEYW)...?
         BZ    PARMSKWR           YES, RETURN
         CR    R15,PARMLSL        KEWORDS LENGTHS ARE EQUAL ..........?
         BNE   PARMSKWN           NO, CHECK NEXT            ---------->
         BCTR  R15,0              KEYWORD LENGTH - 1
         EX    R15,PARMKCLC       COMPARE KEYWORDS          ..........?
         LA    R15,1(0,R15)       KEYWORD LENGTH
         BNE   PARMSKWN           NON EQUAL, CHECK NEXT     ---------->
         TM    KWFLAGS,KWSPC      WAS KEYWORD SPECIFIED ALREADY.......?
         BO    PARMERR            YES, ERROR, DUPLICATE SPECIFICATION->
         OI    KWFLAGS,KWSPC      THIS KEYWORD WAS SPECIFIED ALREADY
         IC    R15,KWCODE         KEWORD FOUND IN THE TABLE
PARMSKWR SUBRET PARMSKW           RETURN                    ---------->
PARMSKWN LA    R14,3(R15,R14)     NEXT KEYWORD ENTRY ADDRESS
         B     PARMSKWL           CHECK NEXT KEYWORD FROM THE TABLE--->
         SPACE
PARMKCLC CLC   0(1,PARMLSA),KWORD COMPARE KEYWORDS
         DROP  R14
PARMKWT  DS    0CL1               PARM KEYWORDS TABLE
         DC    AL1(3),AL1(4),AL1(0),C'PAD'
         DC    AL1(5),AL1(8),AL1(0),C'ALIGN'
         DC    AL1(7),AL1(12),AL1(0),C'NOALIGN'
         DC    AL1(7),AL1(16),AL1(0),C'LINECNT'
         DC    AL1(0)             LAST DUMMY ENTRY
         SPACE
*  CONVERT RIGHT SIDE OF A PARM TO BINARY
KWRSCVB  DS    0H                 CONVERT PARM VALUE TO BINARY
         MVI   TRT,X'FF'          SETUP TRT TABLE TO CHECK NUMERICS
         MVC   TRT+1(L'TRT-1),TRT
         MVC   TRT+C'0'(10),=XL10'00' NUMERICS
         LR    R15,PARMRSL        RIGHT SIDE LENGTH
         BCTR  R15,0              - 1
         EX    R15,PARMRSCN       CHECK NUMERIC IN RIGHT SIDE
         BNZ   PARMERR            NON NUMERIC FOUND, ERROR
         EX    R15,KWRSPACK       PACK
         CVB   R15,D              CONVERT RIGHT SIDE VALUE TO BINARY
         ST    R15,FULLW          STORE IN WORK FIELD
         BR    R14                RETURN
PARMRSCN TRT   0(1,PARMRSA),TRT   CHECK FOR NUMERICS TRT
KWRSPACK PACK  D,0(1,PARMRSA)     PACK PARM RIGHT SIDE VALUE
         SPACE
*---------------------------------------------------------------------*
*  PRINT CURRENT INPUT RECORD                                         *
*---------------------------------------------------------------------*
         SPACE
PRNTCIR  SUBENT
         TM    PRNTFLGS,CURECPF   PRINTED ALREADY       ..............?
         BO    PRNTCIRX           YES, EXIT             -------------->
         MVI   CIR,X'40'          BLANK CIR
         MVC   CIR+1(L'CIR-1),CIR
         L     R0,IRECNT          INPUT RECORD COUNT
         CVD   R0,D               CONVERT TO DECIMAL
         MVC   CIRNO,=X'402020202120' EDIT MASK
         ED    CIRNO,D+5          EDIT IRECNT
         XR    R1,R1              BEGINING OF OUTREC OFFSET ( = 0 )
         TM    FLAGS,RECFMV       VARIABLE RECORD FORMAT..............?
         BNO   PRNTCIR0           NO, BEGINNING IS AT OFFSET 0-------->
         LA    R1,4(0,R1)         YES, BEGINNING AT OFFSET 4
PRNTCIR0 CH    R1,PRNTOFFS        FIRST CONSTANT OFFSET ..............?
         BNE   PRNTCIR1           NO, IT IS NOT BEGINING OF NEW REC--->
         L     R0,OUTRCNT         OUTPUT RECORD COUNT
         AH    R0,=H'1'           + 1
         C     R0,LOUTRCNT        = LAST PRINTED OUTRCNT..............?
         BE    PRNTCIR1           YES, THIS OUTREC NO. ALREADY PRINTED>
         ST    R0,LOUTRCNT        LAST PRINTED OUTREC NUMBER
         CVD   R0,D               CONVERT TO DECIMAL
         MVC   CIRNOO,=X'402020202120' EDIT MASK
         ED    CIRNOO,D+5          EDIT IRECNT
PRNTCIR1 TM    PRNTFLGS,PRNTOFF   OFFSET OF FIRST CONST.HAS TO BE PRNT?
         BNO   PRNTCIRP           NO, CONTINUE          -------------->
         LH    R0,PRNTOFFS        FIRST CONSTANT OFFSET IN OUTREC
         CVD   R0,D               CONVERT TO DECIMAL
         MVC   CIROFF,=X'402020202120' EDIT MASK
         ED    CIROFF,D+5         EDIT OFFSET
PRNTCIRP MVC   CIRT,REC80         INPUT RECORD
         MVC   MSGREC1,CIR        MOVE PRINT TEXT INTO MESSAGE AREA
         BAL   R14,PRNTMSG        PRINT IT
PRNTCIRX OI    PRNTFLGS,CURECPF   CURREN RECORD PRINTED FLAG
         NI    PRNTFLGS,X'FF'-PRNTOFF OFFSET NOT KNOWN
         SUBRET PRNTCIR           EXIT
         SPACE
*---------------------------------------------------------------------*
*  GET NEXT INPUT RECORD                                              *
*---------------------------------------------------------------------*
         SPACE
GETNREC  SUBENT
         GET   SYSIN,REC80        GET RECORD INTO SCAN AREA
         NI    FLAGS1,X'FF'-CEXPCT SET OFF CONTINUATION EXPECTED FLAG
         LA    R0,1
         A     R0,IRECNT          INPUT RECORD COUNT
         ST    R0,IRECNT
         LA    SCANADR,REC80      SCAN STRING ADDRESS
         LA    SCANLEN,71         SCAN STRING LENGTH
         NI    PRNTFLGS,X'FF'-CURECPF SET OFF CURRENT INPUT RECORD
*                                     PRINTED FLAG
         SUBRET GETNREC           EXIT
         SPACE
*---------------------------------------------------------------------*
*  PRINT ERROR MESSAGE                                                *
*---------------------------------------------------------------------*
         SPACE
ERMSGP   SUBENT
         MVC   EMLMSGT(L'EMLMSGT),EMLMSGT-1 BLANK MESSAGE TEXT AREA
         SR    R14,R14
         IC    R14,0(0,R1)        MESSAGE TEXT LENGTH - 1
         LA    R0,L'EMLMSGT-1     LENGTH OF MESSAGE AREA - 1
         CR    R14,R0             IS MESSAGE TEXT LEN > MSG AREA LEN..?
         BNH   ERMSGPM            NO, MOVE IT           -------------->
         LR    R14,R0             YES, CUT OFF PART OF MSG TEXT
ERMSGPM  EX    R14,MVCMSGT        MOVE MESSAGE TEXT INTO RECORD
         L     R0,IRECNT          CURRENT INPUT RECORD NUMBER
         BAL   R14,CONVHC         CONVERT HALFWORD TO CHARACTERS
         MVC   EMLIRN,CHAR6+1     MOVE IT INTO MSG LINE
         LR    R0,SCANADR         CURRENT SCAN CHAR ADDRESS
         LA    R14,REC80          BEGINNING OF SCAN AREA
         SR    R0,R14             SCAN OFFSET
         AH    R0,=H'1'           SCAN COLUMN
         BAL   R14,CONVHC         CONVERT HALFWORD TO CHARACTERS
         MVC   EMLSCN,CHAR6+4     MOVE IT INTO MSG LINE
         L     R0,CCIRECN         CURRENT CONSTANT RECORD NUMBER
         BAL   R14,CONVHC         CONVERT HALFWORD TO CHARACTERS
         MVC   EMLCRN,CHAR6+1     MOVE IT INTO MSG LINE
         L     R0,CCCOL           CURRENT CONSTANT VALUE REC.NO.
         BAL   R14,CONVHC         CONVERT HALFWORD TO CHARACTERS
         MVC   EMLCCN,CHAR6+4     MOVE IT INTO MSG LINE
         BAL   R14,PRNTCIR        PRINT CURRENT INPUT REC.IF NOT PRNTED
         MVC   MSGREC1,ERMSGL
         BAL   R14,PRNTMSG        PRINT MESSAGE
         SUBRET ERMSGP
MVCMSGT  MVC   EMLMSGT(1),1(R1)   MOVE MSG TEXT INTO LINE
         SPACE
ERMSGL   DS    0CL133             ERROR MESSAGE LINE
         DC    C' ***********'
EMLIRN   DS    CL5                ERROR INPUT REC NUMBER
         DC    C','
EMLSCN   DS    CL2                LAST SCAN COLUMN NUMBER
         DC    C' '
EMLCRN   DS    CL5                BEGINING OF CONSTANT REC.NO.
         DC    C','
EMLCCN   DS    CL2                BEGINING OF CONSTANT COL.NO.
         DC    C' '
EMLMSGT  DC    CL(L'ERMSGL-(*-ERMSGL))' '
         SPACE
*---------------------------------------------------------------------*
*  PRINT MSG LINE                                                     *
*---------------------------------------------------------------------*
         SPACE
PRNTMSG  SUBENT
PRNTMSGE CLI   MSGREC1,X'40'      NO SPACING               ...........?
         BE    PRNTMSG1           YES                      ----------->
         CLI   MSGREC1,C'+'       IN THE SAME LINE         ...........?
         BE    PRNTMSG0           YES                      ----------->
         CLI   MSGREC1,C'0'       ONE BLANK LINE           ...........?
         BE    PRNTMSG2           YES                      ----------->
         CLI   MSGREC1,C'-'       TWO BLANK LINES          ...........?
         BE    PRNTMSG3           YES                      ----------->
         MVI   MSGREC1,C'-'       INVALID CONTROL CHAR SECIF., CHANGE
         B     PRNTMSGE           CHECK AGAIN              ----------->
PRNTMSG0 SR    R0,R0              IN THE SAME LINE PRINTING
         B     PRNTMSGL           CHECK IF FITS INTO THE PAGE--------->
PRNTMSG1 LA    R0,1               IN THE NEXT LINE PRINTING
         B     PRNTMSGL           CHECK IF FITS INTO THE PAGE--------->
PRNTMSG2 LA    R0,2               ONE BLANK LINE BEFORE
         B     PRNTMSGL           CHECK IF FITS INTO THE PAGE--------->
PRNTMSG3 LA    R0,3               TWO BLANK LINES BEFORE
PRNTMSGL A     R0,LINECNT         CHECK IF FITS INTO THE PAGE
         C     R0,LINECNTL        LINE COUNT LIMIT EXCEEDED...........?
         BH    PRNTMSGP           YES, NEW PAGE            ----------->
         ST    R0,LINECNT         NO, NEW LINE COUNT
         PUT   PRINT,MSGREC1      NO, PRINT MESSAGE
         MVI   MSGREC1,X'40'      CLEAR MSGREC1
         MVC   MSGREC1+1(L'MSGREC1-1),MSGREC1
         SUBRET PRNTMSG
PRNTMSGP BAL   R14,NEWPAGE        NEW PAGE
         MVI   MSGREC1,X'40'      NO SPACING REQUIRED AFTER NEW PAGE
         B     PRNTMSGE           PRINT MESSAGE AFTER NEW PAGE
         SPACE
*---------------------------------------------------------------------*
*  PRINT NEW PAGE HEADER                                              *
*---------------------------------------------------------------------*
         SPACE
NEWPAGE  SUBENT
         LH    R1,PAGENO          CURRENT PAGE NUMBER
         CVD   R1,D               CONVERT TO DECIMAL
         LA    R1,1(0,R1)         NEXT PAGE NUMBER
         STH   R1,PAGENO
         MVC   HPAGENO,=X'402020202120' EDIT MASK
         ED    HPAGENO,D+5        EDIT PAGE NUMBER
         PUT   PRINT,HEADLNE1
         LA    R0,3               LINE COUNT =3
         ST    R0,LINECNT
         MVI   MSGREC,X'40'
         MVC   MSGREC+1(L'MSGREC-1),MSGREC
         PUT   PRINT,HEADLNE2     HEAD LINE 2
         PUT   PRINT,MSGREC       ONE BLANK LINE
         SUBRET NEWPAGE
         SPACE
HEADLNE1 DS    0CL133             HEADLINE NUMBER 1
         DC    CL13'1OUT.REC'
         DC    CL78'JJDGEN - TEST DATA GENERATION UTILITY'
         DC    CL17'INPUT    OUTPUT'
HDATE    DC    CL9' '
         DC    C'      PAGE'
HPAGENO  DS    CL6                PAGE NUMBER
         SPACE
HEADLNE2 DS    0CL133             HEAD LINE NUMBER 2
         DC    C' '               CONTROL CHARACTER
         DC    C'OFFSET'          FIRST CONSTANT OFFSET IN OUTREC
         DC    C'  '              GAP
         DC    CL80'----+----1----+----2----+----3----+----4----+----5-C
               ---+----6----+----7--'
         DC    C'  '              GAP
         DC    C'REC.NO   REC.NO' INPUT AND OUTPUT RECORD NUMBER
         DC    CL(L'HEADLNE2-(*-HEADLNE2))' '
         SPACE
*---------------------------------------------------------------------*
*  PRINT 1 BLANK LINE                                                 *
*---------------------------------------------------------------------*
         SPACE
BLANKLNE SUBENT
         BAL   R14,LNECNTP1       LINE COUNT + 1
         CLC   LINECNT,LINECNTL   WILL FIT INTO THIS PAGE.............?
         BH    BLNKLNPG           NO,  PRINT NEW PAGE HEADER---------->
         MVI   MSGREC,X'40'
         MVC   MSGREC+1(L'MSGREC-1),MSGREC
         PUT   PRINT,MSGREC
BLNKLRET SUBRET BLANKLNE          RETURN TO CALLER
BLNKLNPG BAL   R14,NEWPAGE        NEW PAGE
         B     BLNKLRET           RETURN
         SPACE
*---------------------------------------------------------------------*
*  LINE COUNT + 1                                                     *
*---------------------------------------------------------------------*
         SPACE
LNECNTP1 DS    0H                 LINE COUNT + 1
         LA    R0,1               LINE COUNT + 1
         A     R0,LINECNT
         ST    R0,LINECNT
         BR    R14                RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
* CONVERT A HALFWORD TO CHARACTER FORMAT ( HALFW VALUE IS IN R0 )     *
*---------------------------------------------------------------------*
         SPACE
CONVHC   DS    0H                 CONVERT HALFWORD TO CHARACTER FORMAT
         CVD   R0,D               CONVERT TO DECIMAL
         MVC   CHAR6,=X'402020202120'  EDIT MASK INTO WORK FIELD
         ED    CHAR6,D+5          EDIT INTO CHARACTER FORMAT
         BR    R14                RETURN
         SPACE
*---------------------------------------------------------------------*
*  INITIALISATION OF PROGRAM ( SOME CONSTANTS )                       *
*---------------------------------------------------------------------*
         SPACE
INIT     DS    0H
         MVC   LINECNT,=F'64'     FORCE NEW PAGE AT THE BEGINING
         MVC   LINECNTL,=F'64'    DEFAULT PAGE LINE COUNT
         MVC   PAGENO,=H'1'       FIRST PAGE NUMBER
         MVI   PARMFLGS,X'00'     DEFAULT PARM
         MVI   FLAGS,X'00'        INIT OF FLAGS
         MVI   PADCHAR,X'40'      DEFAULT PAD CHARACTER
         SR    R0,R0
         ST    R0,IRECNT          COUNTERS TO ZERO
         ST    R0,OUTRCNT         COUNTERS TO ZERO
         ST    R0,LOUTRCNT
         LA    R0,DSA             DSA ADDRESS
         A     R0,OUTRA           OUTPUT RECORD ADDRESS
         ST    R0,OUTRA
         LA    R0,DSA             DSA ADDRESS
         A     R0,OUTRWAA         OUTPUT RECORD WORK AREA ADDRESS
         ST    R0,OUTRWAA
         SPACE
         EXTRACT TIOTA,FIELDS=TIOT EXTRACT TO GET JOBNAME
         L     R1,TIOTA           TIOT ADDRESS
         MVC   JOBNAME,0(R1)      SAVE JOB NAME
         BR    R14                RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*     DCB EXIT FOR PRINT FILE ( SETS UP DEFAULT BLKSIZE )             *
*---------------------------------------------------------------------*
         SPACE
PRTDCBEX DS    0H                 EXIT IF BLKSIZE NOT SPECIFIED        +
                                  MSG DATA SET
         USING IHADCB,R1          DCB ADDRESSABILITY
         LH    R2,DCBBLKSI        LOAD BLKSIZE
         LTR   R2,R2              BLKSIZE=0 ..........................?
         BNZR  R14                NO,RETURN <----------------
         MVC   DCBBLKSI,DCBLRECL  BLKSIZE=LRECL========================
         BR    R14                RETURN    <----------------
         DROP  R1
         SPACE
CLOSE    DS    0H                 FINAL CLOSE OF FILES
         CLOSE (PRINT,,SYSIN,,OUTF)
         BR    R14                RETURN TO CALLER
         SPACE
*---------------------------------------------------------------------*
*  END OF PROCESSING MESSAGE                                          *
*---------------------------------------------------------------------*
         SPACE
EOPMSG   SUBENT
         MVC   EOPRECN1,=XL10'40202020202020202120'
         L     R0,IRECNT          INPUT RECORD COUNT
         CVD   R0,D               CONVERT TO DECIMAL
         ED    EOPRECN1,D+3       EDIT INPUT RECORD COUNT
         MVC   MSGREC1(L'EOPMSG1),EOPMSG1 MSG TEXT INTO PRINT LINE
         BAL   R14,PRNTMSG        PRINT INPUT RECORD COUNT MESSAGE
         MVC   EOPRECN2,=XL10'40202020202020202120'
         L     R0,OUTRCNT         OUTPUT RECORD COUNT
         CVD   R0,D               CONVERT TO DECIMAL
         ED    EOPRECN2,D+3       EDIT OUTPUT RECORD COUNT
         MVC   MSGREC1(L'EOPMSG2),EOPMSG2 MSG TEXT INTO PRINT LINE
         BAL   R14,PRNTMSG        PRINT OUTPUT RECORD COUNT MESSAGE
         MVC   MSGREC1(L'EOPMSGT),EOPMSGT MESSAGE TEXT INTO MESSAGE REC
         BAL   R14,PRNTMSG        PRINT MESSAGE
         SUBRET EOPMSG            RETURN
         SPACE
*---------------------------------------------------------------------*
*  ERRONOUS PARMS SPECIFIED MESSAGE                                   *
*---------------------------------------------------------------------*
         SPACE
PARMERRM SUBENT
         MVI   MSGREC1,X'40'      BLANK MSGREC1
         MVC   MSGREC1+1(L'MSGREC1-1),MSGREC1
         L     R1,PARMA           PARMS ADDRESS
         USING PARML,R1
         MVC   HALF,PARMLEN
         LH    R15,HALF           PARMS LENGTH
         BCTR  R15,0              PARMS LENGTH - 1
         EX    R15,MVCPARMS       MOVE PARMS INTO MESSAGE LINE
         MVC   MSGREC1+(132-L'PRMERRMT)(L'PRMERRMT),PRMERRMT
         BAL   R14,PRNTMSG        PRINT MESSAGE
         BAL   R14,BLANKLNE       BLANK LINE AFTER MESSAGE
         SUBRET PARMERRM          RETURN
MVCPARMS MVC   MSGREC1+1(1),PARMT MOVE PARMS INTO MESSAGE LINE
         DROP  R1
         SPACE
*  MESSAGE DATA SET
         SPACE
PRINT    DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,RECFM=FBA,            +
               LRECL=133,EXLST=PRTEXLST
         SPACE
*  INPUT FILE
         SPACE
SYSIN    DCB   DSORG=PS,MACRF=(GM),DDNAME=SYSIN,                       +
               RECFM=FB,LRECL=80,EODAD=EOF
         SPACE
*  OUTPUT FILE
         SPACE
OUTF     DCB   DSORG=PS,MACRF=(PM),DDNAME=SYSUT1
         SPACE
PRTEXLST DS    0F                 PRINT DCB EXLST
         DC    X'85',AL3(PRTDCBEX) EXIT FOR BLKSIZE NOT SPECIFIED
         SPACE
EOPMSG1  DS    0CL74                  END OF PROCESSING MESSAGE 1
         DC    C'-JJDGEN - NUMBER OF RECORDS READ FROM SYSIN FILE      +
                       : '
EOPRECN1 DC    XL10'40202020202020202120'
EOPMSG1E EQU   *
         SPACE
EOPMSG2  DS    0CL74                  END OF PROCESSING MESSAGE 2
         DC    C'0JJDGEN - NUMBER OF RECORDS WRITTEN ( GENERATED ) INTO+
                SYSUT1 : '
EOPRECN2 DC    XL10'40202020202020202120'
EOPMSG2E EQU   *
         SPACE
EOPMSGT  DC    C'-JJDGEN     E N D    O F    P R O C E S S I N G'
SINOPNEM DC    C'-JJDGEN     SYSIN DCB COULD NOT BE OPENED. PROCESSING +
               TERMINATED, RC = 16'
OUTOPNEM DC    C'-JJDGEN     SYSUT1 DCB COULD NOT BE OPENED. PROCESSING+
                TERMINATED, RC = 16'
INVRFMM  DC    C'-JJDGEN     SYSUT1 HAS INVALID RECORD FORMAT SPECIFIED+
               , PROCESSING TERMINATED, RC = 16'
PRMERRMT DC    C'PARM  SPECIFICATION ERROR,  PARMS IGNORED'
PRTOPNEM WTO   'JOBNAME , JJDGEN  SYSPRINT DCB COULD NOT BE OPENED. PRO+
               CESSING TERMINATED',MF=L
         SPACE
DECVLLMM ERMSG 'NUMERIC CONSTANT NOMINAL VALUE LENGTH IS GREATER THAN 1+
               5 CHARACTERS'
VALOORM  ERMSG 'BINARY CONSTANT VALUE IS OUT OF RANGE ( EITHER MIN. OR +
               MAX. )'
DECVLL0M ERMSG 'CONSTANT NOMINAL VALUE IS NOT SPECIFIED'
EXPCNRM  ERMSG 'EXPECTED CONTINUATION NOT RECEIVED'
OFFSMERM ERMSG 'OFFSET MODIFIER SPECIFICATION ERROR'
DUPFLERM ERMSG 'DUPLICATION FACTOR SPECIFICATION ERROR'
INVCHARM ERMSG 'INVALID CHARACTER FOUND'
LENMERM  ERMSG 'LENGTH MODIFIER SPECIFICATION ERROR'
LRECEXCM ERMSG 'LRECL OF OUTPUT RECORD EXCEEDED'
VALELEM  ERMSG 'SPECIFIED CONSTANT LENGTH IS GREATER THAN LENGTH MODIFI+
               ER'
EDEXPVNS ERMSG 'FLOATING POINT EXPONENT VALUE NOT SPECIFIED'
EDEXPLEX ERMSG 'MORE THAN 3 DIGITS EXPONENT NOT ALLOWED'
MCSCM    ERMSG 'CONSTANT SPECIFICATION CONTINUATION IS MISSING'
         SPACE
         PRINT DATA
MAXBIN   DC    P'2147483647'      MAX.BINARY NUMBER EXCEEDED
MAXBINFP DC    D'2147483647'      MAX.BINARY NUMBER IN FP FORMAT
ONETENTH DC    L'0.1'             ONE TENTH IN EXTENDED FP FORMAT
         PRINT NODATA
         SPACE
OUTRA    DC    A(OUTR-DSA)        OUTPUT RECORD ADDRESS
OUTRWAA  DC    A(OUTRWA-DSA)      OUTPUT RECORD WORK AREA ADDRESS
         LTORG
         SPACE
*  DYNAMIC STORAGE AREA
DSA      DSECT
SA       DS    18F                SAVE AREA
FULLW    DS    F                  WORK FULLWORD
LINECNT  DS    F                  PAGE LINE COUNT
LINECNTL DS    F                  PAGE LINE COUNT LIMIT
IRECNT   DS    F                  INPUT RECORD COUNT
OUTRCNT  DS    F                  OUTPUT RECORD COUNT
LOUTRCNT DS    F                  LAST PRINTED OUTREC COUNT
CCCOL    DS    F                  CURRENT CONST. STAR COLUMN
CCIRECN  DS    F                  CURRENT CONSTANT RECORD NUMBER
DUPF     DS    F                  DUPLICATION FACTOR VALUE
LENGTHM  DS    F                  LENGTH MODIFIER VALUE
FPMAXV   DS    F                  MAX.VALUE OF FIX.POINT (BINARY) CONST
FPMINV   DS    F                  MIN.VALUE OF "F" OR "H" TYPE CONST.
FPNVL    DS    H                  MAX LENGTH (DEC.DIGITS) OF FP VALUE
PAGENO   DS    H                  SYSPRINT PAGE NUMBER
HALF     DS    H                  WORK HALFWORD
LRECL    DS    H                  LRECL SPECIFIED FOR SYSUT1
OFFSET   DS    H                  CURRENT CONSTANT SPECIF. OFFSET
PRNTOFFS DS    H                  FIRST CONST.OFFSET ON THIS IN.REC.
OUTOFFS  DS    H                  AVAILABLE OFFSET IN OUTPUT RECORD
NVCNT    DS    H                  NOMINAL VALUE COUNT
OUTCSOFF DS    H                  IN OUTREC - LAST CONST. START OFFSET
TRT      DS    CL256              TRANSLATE AND TEST TABLE
TRTAB    DS    CL256              TRANSLATE TABLE
JOBNAME  DS    CL8                JOB NAME
CHAR6    DS    CL6                WORK FIELD
MSGREC   DS    CL133              MESSAGE RECORD
MSGREC1  DS    CL133              MESSAGE RECORD
REC80    DS    CL80               INPUT RECORD AREA
         SPACE
EDD      DS    D                  VALUE OF FP NUM. IN FP REPRESENTATION
EDDL     DS    D                  LOW ORDER PART OF EXTENDED NUMBER
EDE      DS    E                  VALUE OF SHORT (TYPE=E) FP NUM.
ED10     DS    H                  POWER OF 10 THAT NUMBER HAS TO BE
*                                 MULTIPLIED BY
EDEXP    DS    H                  VALUE OF THE FLOATING POINT EXPONENT
EDSGD    DS    H                  NUMBER OF SIGNIFICANT DIGITS
EDFLAGS  DS    XL1                FLAGS
EDSDF    EQU   BIT0               FIRST SIGNIFICANT DIGIT FOUND
EDDPF    EQU   BIT1               DECIMAL POINT FOUND
EDEF     EQU   BIT2               EXPONENT FOUND
EDFPC    EQU   BIT3               SUBROUTINE EDCONV ALREADY EXECUTED
EDFP0    EQU   BIT4               THE FP NUMBER = 0
EDSIGN   DS    CL1                SIGN OF FP NUMBER
EDCEND   EQU   *                  END OF ED CONSTANTS
         SPACE
CIR      DS    0CL133             CURRENT INPUT RECORD FOR OUTPUT
         DC    C' '               CONTROL CHARACTER
CIROFF   DC    X'402020202120'    FIRST CONSTANT OFFSET IN OUTREC
         DC    C'  '              GAP
CIRT     DS    CL80               RECORD ITSELF
         DC    C'  '              GAP
CIRNO    DC    X'402020202120'    INPUT RECORD NUMBER
         DC    C'  '              GAP
CIRNOO   DC    X'402020202120'    OUTPUT RECORD NUMBER
         DC    CL(L'CIR-(*-CIR))' ' END, EMPTY PART
         SPACE
PADCHAR  DC    X'40'              PAD CHARACTER
FUNBYTE  DS    XL1                FUNCTION BYTE FROM TRANSLATE AND TEST
TYPE     DS    XL1                FIELD TYPE CODE
TYPEVLD  DS    XL1                CONST.VALUE LEFT DELIMITER
TYPEVRD  DS    XL1                CONST.VALUE RIGHT DELIMITER
VALSIGN  DS    CL1                NUMERIC VALUE SIGN
         SPACE
FLAGS    DC    X'00'              FLAGS
RECFMF   EQU   BIT0               SYSUT1 RECFM=F SPECIFIED
RECFMV   EQU   BIT1               SYSUT1 RECFM=V SPECIFIED
RECFMU   EQU   BIT2               SYSUT1 RECFM=U SPECIFIED
         SPACE
PARMFLGS DC    X'00'              PARM FLAGS
ALIGN    EQU   BIT0               H,F TYPE CONSTANTS ALIGNMENT REQUIRED
         SPACE
FLAGS1   DC    X'00'              FLAGS ( OPERATIONAL )
SEARCHNC EQU   BIT0               SEARCH FOR A NEW CONSTANT FLAG
CONPINP  EQU   BIT1               CONSTANT PROCESSING IS IN PROGRESS
*                                 IN PROGRESS
CHARVPP  EQU   BIT2               CHARACTER VALUE PROCESSING IS IN
DUPFP    EQU   BIT3               DUPLICATION FACTOR PRESENT FLAG
OFFSP    EQU   BIT4               OFFSET SPECIFICATION PRESENT FLAG
LENMP    EQU   BIT5               LENGTH SPECIFICATION PRESENT FLAG
CEXPCT   EQU   BIT6               CONTINUATION OF OUT.REC.EXPECTED FLAG
*                                 ( IN CASE OF END-OFF-FILE CONDITION )
         SPACE
FLAGS2   DC    X'00'              FLAGS ( OPERATIONAL )
INVCHAR  EQU   BIT0               INVALID CHAR MESSAGE PRINTED FLAG
LRECLEX  EQU   BIT1               OUTPUT LRECL EXCEEDED
CONTEXP  EQU   BIT2               CONTINUATION EXPECTED FLAG
         SPACE
PRNTFLGS DC    X'00'              PRINTING FLAGS
CURECPF  EQU   BIT0               CURRENT INPUT RECORD PRINTED FLAG
PRNTOFF  EQU   BIT1               CURRENT IN.REC.FIRST CONST.OFFSET
*                                 HAS TO BE PRINTED
         SPACE
ZONED    DS    ZL15               ZONED WORK FIELD
D        DS    D                  WORK DOUBLEWORD
OUTR     DS    CL32768            OUTPUT RECORD AREA
OUTRWA   DS    CL32768            WORK AREA INTO WHICH INPUT CONSTANTS
         DS    CL32768            ARE MOVED BY PARSE ROUTINE
DSAE     EQU   *                  DSA END
         SPACE 2
*  PARM FIELD FORMAT
PARML    DSECT
PARMLEN  DS    AL2                LENGTH OF PARM TEXT
PARMT    DS    CL100              PARM TEXT
         SPACE
         DCBD  DSORG=PS
         SPACE 2
*  PARM KEYWORD TABLE ENTRY FORMAT
KWTE     DSECT
KWLEN    DS    XL1                KEYWORD LENGTH
KWCODE   DS    XL1                KEYWORD CODE
KWFLAGS  DS    XL1                KEYWORD FLAGS
KWSPC    EQU   BIT0               KEYWORD ALREADY SPECIFIED FLAG
KWORD    DS    CL30               KEYWORD ITSELF
         END   JJDGEN
/*
//*
//LKED     EXEC PGM=IEWL,
//         PARM='NCAL,LET,LIST,XREF'
//SYSLMOD  DD DISP=SHR,DSN=...YOUR.LOADLIB....
//SYSUT1   DD UNIT=VIO,SPACE=(TRK,(10,10))
//SYSPRINT DD SYSOUT=*
//SYSLIN   DD DSN=&&SYSLIN,DISP=(OLD,DELETE)
//         DD DDNAME=SYSIN
//SYSIN    DD *
 NAME JJDGEN(R)
/*
