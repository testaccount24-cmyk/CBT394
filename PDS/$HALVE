
GENERALIZED BINARY SEARCH TECHNIQUE TABLES PROCESSING ROUTINE
-------------------------------------------------------------

Specifications:

Module name: HALVE

Attributes : REENTERABLE

Private macros: HLVTD - generates Table Definition control block

Function = see below

   The routine can be used to access tables having elements sorted in
a unique key sequence.  HALVE searches a table for specified key and
returns the address and position of a table element containing such a
key.  It allows adding of new keys to the table (table expansion) so
that it can be used for sorting or dynamic creation of sorted tables.
If table is specified large enough to accomodate new elements and user
supplies key not existing in the table - HALVE positions new key in the
table, displaces accordingly the other elements and returns address and
position of the new element. User should then initialyse it with
data.
   Table is defined by the control block called TABLE DEFINITION.  User
can specify so called COMPARE exit routine, which performs comparison
of input key with keys of table elements. This exit makes possible
processing of tables with complex key structures and with elements of
variable length.

CALL arguments list format:

   CALL HALVE, ( TDEF, INPUT_KEY, IF_FOUND_INDICATOR )

   TDEF        - table definition ( see TDEF DSECT for format )
   INPUT_KEY   - key to be located in the table
   INDICATOR   - BIT(1) (PL/I attr)   ='1'B - INPUT_KEY found in the
                (X'80' in Assembler)          table
                                      ='0'B - INPUT_KEY not found
   INPUT-KEY           - input argument
   IF_FOUND_INDICATOR  - output argument
   TDEF                - input/output argument

TABLE DEFINITION control block layout:

TDEF     DSECT
SA       DS    20A              save area for HALVE (reenterability)
FEA      DS    A                address of the first elem.of table
LEN      DS    H                length of a table element
OFFS     DS    H                offset of two adjacent table elements
KL       DS    F                length of table character key
         ORG   KL                  or
CMPRE    DS    A                address of COMPARE exit entry point
NM       DS    F                max.no.of elements in the table
NA       DS    F                current no.of active elem.in the table
EADR     DS    A                located elem.addr. returned by HALVE
EPOS     DS    F                position in the table of located elem.
                                or zero if table cannot be expanded

Here is the purpose of particular fields of TDEF:
.SA - save area for HALVE. It is required because HALVE may call COMPARE
      exit.
.FEA - table itself and TDEF do not have to be in contiguous storage.
      Multiple tasks can access the same table through one TDEF per
      task (however a table used in multitasking environment should
      not be expandable nor elements should be modified).
.LEN - required if table can be expanded to perform displacement of
      elements.
.OFFS - required for binary search. Diferentiation between LEN and OFFS
      makes possible processing of single vectors of multidimensional
      tables.
.KL - if key is character, has ascending sequence in the table, is
      located in front of the table element, its length is <= 256, then
      COMPARE exit does not have to be provided to process the table.
      HALVE uses it own compare code during binary search.
.CMPRE - COMPARE exit address if required. Has to be provided if key
      does not satisfy the above conditions. Makes posible binary
      search of a table with variable length elements.
      KL and CMPRE are the same field. HALVE considers it to be the KL
      if its binary value is <= 256. Otherwise it treats it as address
      of COMPARE exit.
.NM - required if a table is to be expandable. It indicates how much
      storage has been allocated for the table. If NM = NA, table can
      not be expanded (no new elements can be added to the table).
.NA - specifies how many elements there are currently in the table.
      Tables created by JJTBGEN have always   NM = NA.
.EADR - address (pointer to) of table element located by HALVE in
      the table.
.EPOS - position (element number) of element located by HALVE. It is
      set to zero if INPUT_KEY has not been found in the table and
      table cannot be expanded to accomodate the new element (NM=NA).
      So if INDICATOR is set to OFF (zero) and EPOS is not zero - EADR
      points to a new element in the table. It is initialyzed with
      binary zeros by HALVE and has to filled in with data by the caller
      of HALVE.

HALVE does not perform and validity checks on TDEF fields because it
would adversely affect performance of tables access. It is the user's
responsibility to ensure validity of TDEF. Program checks or loops are
likely to occur if TDEF is not valid. User has also to ensure that
table elements are in the right key sequence and that keys are unique.

COMPARE exit routine.
--------------------
   If table's key does not satisfy conditions as in KL field - user has
to provide his own exit to be used by HALVE. Exit routine has to be
written in ASSEMBLER (performance reasons).  Binary search locates mid
element of a table (or current table section) and compares its key with
input key provided in the CALL of HALVE. If they are equal - search is
terminated. If input key is lower than mid element's key, proceeds to
search first part of the table as delimited by the mid element.
Otherwise search continues within second part of the table. HIGHER,
EQUAL, LOWER terms reflect relative order of keys in the table, their
relative location within the table. Interface to the COMPARE exit is
the following (on input):
  R13 - save area address
  R14 - return address
  R15 - entry point address
  R5  - input key address (key presented to HALVE)
  R11 - table mid element address
On output R15 must have one of the return codes:
  0  if keys are equal
  4  if input key is HIGHER than mid element's key
  8  if input key is LOWER  than mid element's key
Contents of any other register than R15 can not be modified by the
exit (if necessary, registers have to be saved and restored).


Written by: Janek JAKUBEK, OGL
            March-April 1986
